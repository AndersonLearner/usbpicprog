// generated 2008/4/11 17:29:11 CEST by frans@ubuntu.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- usbpicprog.glade
// for gtk 2.12.0 and gtkmm 2.12.0
//
// Please modify the corresponding derived classes in ./src/uppMainWindow.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "uppMainWindow_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtk/gtkimagemenuitem.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //

uppMainWindow_glade::uppMainWindow_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  uppMainWindow = this;
   gmm_data = new GlademmData(get_accel_group());
   new1 = NULL;
   open1 = NULL;
   image3 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-refresh"), Gtk::IconSize(1)));
   reload = NULL;
   save = NULL;
   save_as = NULL;
   separatormenuitem1 = NULL;
   quit = NULL;
   menuFile_menu = Gtk::manage(new class Gtk::Menu());
   menuFile = NULL;
   program = NULL;
   bulkerase = NULL;
   read = NULL;
   verify = NULL;
   menuActions_menu = Gtk::manage(new class Gtk::Menu());
   menuActions = NULL;
   menuView = NULL;
   about = NULL;
   menuHelp_menu = Gtk::manage(new class Gtk::Menu());
   menuHelp = NULL;
   uppMainMenu = Gtk::manage(new class Gtk::MenuBar());
   image4 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-new"), Gtk::IconSize(4)));
   newButton = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   newButtonToolItem = Gtk::manage(new class Gtk::ToolItem());
#endif //
   image5 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-open"), Gtk::IconSize(4)));
   openButton = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   openButtonToolItem = Gtk::manage(new class Gtk::ToolItem());
#endif //
   image6 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-refresh"), Gtk::IconSize(4)));
   reloadButton = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   reloadButtonToolItem = Gtk::manage(new class Gtk::ToolItem());
#endif //
   image7 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-save"), Gtk::IconSize(4)));
   saveButton = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   saveButtonToolItem = Gtk::manage(new class Gtk::ToolItem());
#endif //
   image8 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-save-as"), Gtk::IconSize(4)));
   saveAsButton = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   saveAsButtonToolItem = Gtk::manage(new class Gtk::ToolItem());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   picTypeToolItem = Gtk::manage(new class Gtk::ToolItem());
#endif //
   picTypeCombo = Gtk::manage(new class Gtk::ComboBox());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem10 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   toolBar = Gtk::manage(new class Gtk::Toolbar());
   hexView = Gtk::manage(new class Gtk::TextView());
   scrolledwindow1 = Gtk::manage(new class Gtk::ScrolledWindow());
   statusBar = Gtk::manage(new class Gtk::Statusbar());
   topBox = Gtk::manage(new class Gtk::VBox(false, 0));
   
   
   menuFile_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-new")));
   new1 = (Gtk::ImageMenuItem *)&menuFile_menu->items().back();
   
   menuFile_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-open")));
   open1 = (Gtk::ImageMenuItem *)&menuFile_menu->items().back();
   
   menuFile_menu->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("_Reload", *image3));
   reload = (Gtk::ImageMenuItem *)&menuFile_menu->items().back();
   
   menuFile_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-save")));
   save = (Gtk::ImageMenuItem *)&menuFile_menu->items().back();
   
   menuFile_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-save-as")));
   save_as = (Gtk::ImageMenuItem *)&menuFile_menu->items().back();
   
   menuFile_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separatormenuitem1 = (Gtk::MenuItem *)&menuFile_menu->items().back();
   
   menuFile_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-quit")));
   quit = (Gtk::ImageMenuItem *)&menuFile_menu->items().back();
   
   menuActions_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Program"));
   program = (Gtk::MenuItem *)&menuActions_menu->items().back();
   
   menuActions_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Bulk _Erase"));
   bulkerase = (Gtk::MenuItem *)&menuActions_menu->items().back();
   
   menuActions_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Read"));
   read = (Gtk::MenuItem *)&menuActions_menu->items().back();
   
   menuActions_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Verify"));
   verify = (Gtk::MenuItem *)&menuActions_menu->items().back();
   
   menuHelp_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("_About"));
   about = (Gtk::MenuItem *)&menuHelp_menu->items().back();
   
   uppMainMenu->items().push_back(Gtk::Menu_Helpers::MenuElem("_File", *menuFile_menu));
   menuFile = (Gtk::MenuItem *)&uppMainMenu->items().back();
   
   uppMainMenu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Actions", *menuActions_menu));
   menuActions = (Gtk::MenuItem *)&uppMainMenu->items().back();
   
   uppMainMenu->items().push_back(Gtk::Menu_Helpers::MenuElem("_View"));
   menuView = (Gtk::MenuItem *)&uppMainMenu->items().back();
   
   uppMainMenu->items().push_back(Gtk::Menu_Helpers::MenuElem("_Help", *menuHelp_menu));
   menuHelp = (Gtk::MenuItem *)&uppMainMenu->items().back();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolBar->append(*newButtonToolItem);
#else //
   toolBar->tools().push_back(Gtk::Toolbar_Helpers::Element(*newButton));
   
   Gtk::Widget *newButtonToolItem = toolBar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolBar->append(*openButtonToolItem);
#else //
   toolBar->tools().push_back(Gtk::Toolbar_Helpers::Element(*openButton));
   
   Gtk::Widget *openButtonToolItem = toolBar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolBar->append(*reloadButtonToolItem);
#else //
   toolBar->tools().push_back(Gtk::Toolbar_Helpers::Element(*reloadButton));
   
   Gtk::Widget *reloadButtonToolItem = toolBar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolBar->append(*saveButtonToolItem);
#else //
   toolBar->tools().push_back(Gtk::Toolbar_Helpers::Element(*saveButton));
   
   Gtk::Widget *saveButtonToolItem = toolBar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolBar->append(*saveAsButtonToolItem);
#else //
   toolBar->tools().push_back(Gtk::Toolbar_Helpers::Element(*saveAsButton));
   
   Gtk::Widget *saveAsButtonToolItem = toolBar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolBar->append(*picTypeToolItem);
#else //
   toolBar->tools().push_back(Gtk::Toolbar_Helpers::Element(*WidgetQPykCHQ));
   
   Gtk::Widget *picTypeToolItem = toolBar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolBar->append(*toolitem10);
#else //
   toolBar->tools().push_back(Gtk::Toolbar_Helpers::Element(*picTypeCombo));
   
   Gtk::Widget *toolitem10 = toolBar->tools().back().get_widget();
#endif //
   image3->set_name("image3");
   image3->set_alignment(0.5,0.5);
   image3->set_padding(0,0);
   menuFile_menu->set_name("menuFile_menu");
   menuActions_menu->set_name("menuActions_menu");
   menuHelp_menu->set_name("menuHelp_menu");
   uppMainMenu->set_name("uppMainMenu");
   image4->set_name("image4");
   image4->set_alignment(0.5,0.5);
   image4->set_padding(0,0);
   newButton->set_name("newButton");
   newButton->set_flags(Gtk::CAN_FOCUS);
   newButton->set_relief(Gtk::RELIEF_NORMAL);
   newButton->add(*image4);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   newButtonToolItem->set_name("newButtonToolItem");
   newButtonToolItem->set_visible_horizontal(true);
   newButtonToolItem->set_visible_vertical(true);
   newButtonToolItem->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   newButtonToolItem->add(*newButton);
#endif //
   image5->set_name("image5");
   image5->set_alignment(0.5,0.5);
   image5->set_padding(0,0);
   openButton->set_name("openButton");
   openButton->set_flags(Gtk::CAN_FOCUS);
   openButton->set_relief(Gtk::RELIEF_NORMAL);
   openButton->add(*image5);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   openButtonToolItem->set_name("openButtonToolItem");
   openButtonToolItem->set_visible_horizontal(true);
   openButtonToolItem->set_visible_vertical(true);
   openButtonToolItem->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   openButtonToolItem->add(*openButton);
#endif //
   image6->set_name("image6");
   image6->set_alignment(0.5,0.5);
   image6->set_padding(0,0);
   reloadButton->set_name("reloadButton");
   reloadButton->set_flags(Gtk::CAN_FOCUS);
   reloadButton->set_relief(Gtk::RELIEF_NORMAL);
   reloadButton->add(*image6);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   reloadButtonToolItem->set_name("reloadButtonToolItem");
   reloadButtonToolItem->set_visible_horizontal(true);
   reloadButtonToolItem->set_visible_vertical(true);
   reloadButtonToolItem->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   reloadButtonToolItem->add(*reloadButton);
#endif //
   image7->set_name("image7");
   image7->set_alignment(0.5,0.5);
   image7->set_padding(0,0);
   saveButton->set_name("saveButton");
   saveButton->set_flags(Gtk::CAN_FOCUS);
   saveButton->set_relief(Gtk::RELIEF_NORMAL);
   saveButton->add(*image7);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   saveButtonToolItem->set_name("saveButtonToolItem");
   saveButtonToolItem->set_visible_horizontal(true);
   saveButtonToolItem->set_visible_vertical(true);
   saveButtonToolItem->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   saveButtonToolItem->add(*saveButton);
#endif //
   image8->set_name("image8");
   image8->set_alignment(0.5,0.5);
   image8->set_padding(0,0);
   saveAsButton->set_name("saveAsButton");
   saveAsButton->set_flags(Gtk::CAN_FOCUS);
   saveAsButton->set_relief(Gtk::RELIEF_NORMAL);
   saveAsButton->add(*image8);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   saveAsButtonToolItem->set_name("saveAsButtonToolItem");
   saveAsButtonToolItem->set_visible_horizontal(true);
   saveAsButtonToolItem->set_visible_vertical(true);
   saveAsButtonToolItem->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   saveAsButtonToolItem->add(*saveAsButton);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   picTypeToolItem->set_name("picTypeToolItem");
   picTypeToolItem->set_visible_horizontal(true);
   picTypeToolItem->set_visible_vertical(true);
   picTypeToolItem->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
   picTypeCombo->set_name("picTypeCombo");
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem10->set_name("toolitem10");
   toolitem10->set_visible_horizontal(true);
   toolitem10->set_visible_vertical(true);
   toolitem10->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem10->add(*picTypeCombo);
#endif //
   toolBar->set_name("toolBar");
   toolBar->set_tooltips(true);
   toolBar->set_toolbar_style(Gtk::TOOLBAR_BOTH);
   toolBar->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolBar->set_show_arrow(true);
#endif //
   hexView->set_name("hexView");
   hexView->set_flags(Gtk::CAN_FOCUS);
   hexView->set_editable(true);
   hexView->set_cursor_visible(true);
   hexView->set_pixels_above_lines(0);
   hexView->set_pixels_below_lines(0);
   hexView->set_pixels_inside_wrap(0);
   hexView->set_left_margin(0);
   hexView->set_right_margin(0);
   hexView->set_indent(0);
   hexView->set_wrap_mode(Gtk::WRAP_NONE);
   hexView->set_justification(Gtk::JUSTIFY_LEFT);
   scrolledwindow1->set_name("scrolledwindow1");
   scrolledwindow1->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow1->set_shadow_type(Gtk::SHADOW_IN);
   scrolledwindow1->set_policy(Gtk::POLICY_ALWAYS, Gtk::POLICY_ALWAYS);
   scrolledwindow1->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow1->add(*hexView);
   statusBar->set_name("statusBar");
   topBox->set_name("topBox");
   topBox->pack_start(*uppMainMenu, Gtk::PACK_SHRINK, 0);
   topBox->pack_start(*toolBar, Gtk::PACK_SHRINK, 0);
   topBox->pack_start(*scrolledwindow1);
   topBox->pack_start(*statusBar, Gtk::PACK_SHRINK, 0);
   uppMainWindow->set_name("uppMainWindow");
   uppMainWindow->set_title("UsbPicProg");
   uppMainWindow->set_default_size(800,600);
   uppMainWindow->set_modal(false);
   uppMainWindow->property_window_position().set_value(Gtk::WIN_POS_NONE);
   uppMainWindow->set_resizable(true);
   uppMainWindow->property_destroy_with_parent().set_value(false);
   uppMainWindow->add(*topBox);
   new1->show();
   open1->show();
   image3->show();
   reload->show();
   save->show();
   save_as->show();
   separatormenuitem1->show();
   quit->show();
   menuFile->show();
   program->show();
   bulkerase->show();
   read->show();
   verify->show();
   menuActions->show();
   menuView->show();
   about->show();
   menuHelp->show();
   uppMainMenu->show();
   image4->show();
   newButton->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   newButtonToolItem->show();
#endif //
   image5->show();
   openButton->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   openButtonToolItem->show();
#endif //
   image6->show();
   reloadButton->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   reloadButtonToolItem->show();
#endif //
   image7->show();
   saveButton->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   saveButtonToolItem->show();
#endif //
   image8->show();
   saveAsButton->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   saveAsButtonToolItem->show();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   picTypeToolItem->show();
#endif //
   picTypeCombo->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem10->show();
#endif //
   toolBar->show();
   hexView->show();
   scrolledwindow1->show();
   statusBar->show();
   topBox->show();
   uppMainWindow->show();
   new1->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_new1_activate), false);
   open1->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_open1_activate), false);
   reload->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_reload_activate), false);
   save->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_save_activate), false);
   save_as->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_save_as_activate), false);
   quit->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_quit_activate), false);
   program->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_program_activate), false);
   bulkerase->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_bulkerase_activate), false);
   read->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_read_activate), false);
   verify->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_verify_activate), false);
   about->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_about_activate), false);
   newButton->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_newButton_activate), false);
   openButton->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_openButton_activate), false);
   reloadButton->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_reloadButton_activate), false);
   saveButton->signal_activate().connect(SigC::slot(*this, &uppMainWindow_glade::on_saveButton_activate), false);
}

uppMainWindow_glade::~uppMainWindow_glade()
{  delete gmm_data;
}
