gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 6-21-2007  16:16:22
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:15 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _application_data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _section_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute Ival
                                           S_application_iface__application_data	code	0X002000
                                           _application_data:
002000   00ff     reset                    	DB	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
002002   0000     nop                      
002004   0000     nop                      
002006   0000     nop                      
002008   0000     nop                      
00200a   0000     nop                      
00200c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00200e   0000     nop                      
002010   0000     nop                      
002012   0000     nop                      
002014   0000     nop                      
002016   0000     nop                      
002018   0000     nop                      	DB	0x00
                                           
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	    6 (0x0006) bytes ( 0.00%)
                                           ;           	    3 (0x0003) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:16 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _boot_goto_table
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_boot_iface__boot_goto_table	code	0X00001C
                                           _boot_goto_table:
                                           	extern _dispatch_usb_event
                                           	extern _reset_usb
                                           	extern _usb_sleep
                                           	extern _fill_in_buffer
                                           	extern _ep0_init
                                           	extern _ep0_in
                                           	extern _ep0_setup
                                           	extern _ep1_init
                                           	extern _ep1_out
                                           	extern _ep2_init
                                           	extern _ep2_in
                                           	extern __mullong
                                           	extern __mulint
                                           	extern __gptrget1
                                           	extern __gptrget2
                                           	extern __gptrget3
                                           	extern __gptrget4
                                           	extern __gptrput1
                                           	extern __gptrput2
                                           	extern __gptrput3
                                           	extern _delay10ktcy
                                           	extern _delay1ktcy
                                           	extern _delay10tcy
                                           	;--------------------------------
00001c   0010     retfie	0                 	DW 0x0010 ; Boot Version in BCD format
00001e   ef3d     goto	0x7a                	goto _dispatch_usb_event
000020   f000
000022   efa1     goto	0x1542              	goto _reset_usb
000024   f00a
000026   ef8f     goto	0x1b1e              	goto _usb_sleep
000028   f00d
00002a   ef29     goto	0x1052              	goto _fill_in_buffer
00002c   f008
00002e   efbe     goto	0x197c              	goto _ep0_init
000030   f00c
000032   efb7     goto	0x96e               	goto _ep0_in
000034   f004
000036   ef2c     goto	0x1258              	goto _ep0_setup
000038   f009
00003a   ef4a     goto	0x1a94              	goto _ep1_init
00003c   f00d
00003e   ef0d     goto	0xc1a               	goto _ep1_out
000040   f006
000042   ef9c     goto	0x1b38              	goto _ep2_init
000044   f00d
000046   ef28     goto	0x1650              	goto _ep2_in
000048   f00b
00004a   ef1f     goto	0xe3e               	goto __mullong
00004c   f007
00004e   effa     goto	0x17f4              	goto __mulint
000050   f00b
000052   ef70     goto	0x1ae0              	goto __gptrget1
000054   f00d
000056   ef34     goto	0x1a68              	goto __gptrget2
000058   f00d
00005a   ef03     goto	0x1a06              	goto __gptrget3
00005c   f00d
00005e   efe3     goto	0x19c6              	goto __gptrget4
000060   f00c
000062   efb4     goto	0x1b68              	goto __gptrput1
000064   f00d
000066   efa8     goto	0x1b50              	goto __gptrput2
000068   f00d
00006a   ef81     goto	0x1b02              	goto __gptrput3
00006c   f00d
00006e   ef30     goto	0x660               	goto _delay10ktcy
000070   f003
000072   ef49     goto	0x692               	goto _delay1ktcy
000074   f003
000076   ef24     goto	0x648               	goto _delay10tcy
000078   f003
                                           	
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   98 (0x0062) bytes ( 0.07%)
                                           ;           	   49 (0x0031) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:16 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _stack
                                           	global _stack_end
                                           	global _init_boot
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _init_usb
                                           	extern _usb_sleep
                                           	extern _dispatch_usb_event
                                           	extern _section_descriptor
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           	extern _application_data
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           INTCON	equ	0xff2
                                           TOSL	equ	0xffd
                                           TOSH	equ	0xffe
                                           TOSU	equ	0xfff
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_boot_main_0	udata
                                           _init_boot_count_1_1	res	4
                                           
                                           
                                           ustat_boot_main_00	udata	0X0200
                                           _stack	res	254
                                           _stack_end	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_boot_main__main	code
                                           _main:
                                           ;	.line	84; boot_main.c	init_boot();
001894   ecec     call	0x13d8, 0           	CALL	_init_boot
001896   f009
                                           ;	.line	86; boot_main.c	init_usb();
001898   ec1e     call	0x1a3c, 0           	CALL	_init_usb
00189a   f00d
                                           _00119_DS_:
                                           ;	.line	90; boot_main.c	usb_sleep();
00189c   ec8f     call	0x1b1e, 0           	CALL	_usb_sleep
00189e   f00d
                                           ;	.line	91; boot_main.c	dispatch_usb_event();
0018a0   ec3d     call	0x7a, 0             	CALL	_dispatch_usb_event
0018a2   f000
                                           ;	.line	92; boot_main.c	if((application_data.invalid == 0) &&
0018a4   0e00     movlw	0                  	MOVLW	LOW(_application_data)
0018a6   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0018a8   0e20     movlw	0x20               	MOVLW	HIGH(_application_data)
0018aa   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
0018ac   0e00     movlw	0                  	MOVLW	UPPER(_application_data)
0018ae   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
0018b0   0009     tblrd	*+                 	TBLRD*+	
0018b2   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
0018b4   f000
0018b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0018b8   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0018ba   ef4e     goto	0x189c              	GOTO	_00119_DS_
0018bc   f00c
                                           ;	.line	93; boot_main.c	(GET_ACTIVE_CONFIGURATION() > FLASH_CONFIGURATION))
0018be   0e03     movlw	0x3                	MOVLW	0x03
0018c0   5c5e     subwf	0x5e, 0, 0         	SUBWF	_usb_active_cfg, W
0018c2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0018c4   ef4e     goto	0x189c              	GOTO	_00119_DS_
0018c6   f00c
                                           ;	.line	96; boot_main.c	application_data.main();
0018c8   0e16     movlw	0x16               	MOVLW	LOW(_application_data + 22)
0018ca   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0018cc   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 22)
0018ce   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
0018d0   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 22)
0018d2   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
0018d4   0009     tblrd	*+                 	TBLRD*+	
0018d6   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
0018d8   f000
0018da   0009     tblrd	*+                 	TBLRD*+	
0018dc   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
0018de   f001
0018e0   0009     tblrd	*+                 	TBLRD*+	
0018e2   cff5     movff	0xff5, 0x2         	MOVFF	TABLAT, r0x02
0018e4   f002
0018e6   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
0018e8   ffe5
0018ea   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
0018ec   0005     push                     	PUSH	
0018ee   0e0a     movlw	0xa                	MOVLW	LOW(_00127_DS_)
0018f0   6efd     movwf	0xfd, 0            	MOVWF	TOSL
0018f2   0e19     movlw	0x19               	MOVLW	HIGH(_00127_DS_)
0018f4   6efe     movwf	0xfe, 0            	MOVWF	TOSH
0018f6   0e00     movlw	0                  	MOVLW	UPPER(_00127_DS_)
0018f8   6eff     movwf	0xff, 0            	MOVWF	TOSU
0018fa   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
0018fc   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
0018fe   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
001900   fffb
001902   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
001904   fffa
001906   5000     movf	0, 0, 0             	MOVF	r0x00, W
001908   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00127_DS_:
                                           ;	.line	98; boot_main.c	INTCON = 0; // Forbid interrupts
00190a   6af2     clrf	0xf2, 0             	CLRF	_INTCON
00190c   ef4e     goto	0x189c              	GOTO	_00119_DS_
00190e   f00c
001910   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_boot_main__init_boot	code
                                           _init_boot:
                                           ;	.line	34; boot_main.c	void init_boot(void)
0013d8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0013da   ffe5
0013dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0013de   ffd9
0013e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0013e2   ffe5
                                           ;	.line	38; boot_main.c	ADCON1 = 0x0F;       //all channels of the AD-converter off (digital)
0013e4   0e0f     movlw	0xf                	MOVLW	0x0f
0013e6   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	39; boot_main.c	CMCON  = 0x07;       //Comparator channels off (digital)
0013e8   0e07     movlw	0x7                	MOVLW	0x07
0013ea   6eb4     movwf	0xb4, 0            	MOVWF	_CMCON
                                           ;	.line	40; boot_main.c	TRISA  = 0xFE;       //
0013ec   0efe     movlw	0xfe               	MOVLW	0xfe
0013ee   6e92     movwf	0x92, 0            	MOVWF	_TRISA
                                           ;	.line	41; boot_main.c	PORTA  = 0x01;
0013f0   0e01     movlw	0x1                	MOVLW	0x01
0013f2   6e80     movwf	0x80, 0            	MOVWF	_PORTA
                                           ;	.line	42; boot_main.c	INTCON2bits.RBPU=0;
0013f4   9ef1     bcf	0xf1, 0x7, 0         	BCF	_INTCON2bits, 7
0013f6   0100     movlb	0                  	BANKSEL	_init_boot_count_1_1
                                           ;	.line	43; boot_main.c	count = 0x80000;
0013f8   6b60     clrf	0x60, 0x1           	CLRF	_init_boot_count_1_1, B
0013fa   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 1)
0013fc   6b61     clrf	0x61, 0x1           	CLRF	(_init_boot_count_1_1 + 1), B
0013fe   0e08     movlw	0x8                	MOVLW	0x08
001400   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 2)
001402   6f62     movwf	0x62, 0x1          	MOVWF	(_init_boot_count_1_1 + 2), B
001404   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 3)
001406   6b63     clrf	0x63, 0x1           	CLRF	(_init_boot_count_1_1 + 3), B
                                           _00105_DS_:
001408   0100     movlb	0                  	BANKSEL	_init_boot_count_1_1
                                           ;	.line	44; boot_main.c	while(count)
00140a   5160     movf	0x60, 0, 0x1        	MOVF	_init_boot_count_1_1, W, B
00140c   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 1)
00140e   1161     iorwf	0x61, 0, 0x1       	IORWF	(_init_boot_count_1_1 + 1), W, B
001410   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 2)
001412   1162     iorwf	0x62, 0, 0x1       	IORWF	(_init_boot_count_1_1 + 2), W, B
001414   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 3)
001416   1163     iorwf	0x63, 0, 0x1       	IORWF	(_init_boot_count_1_1 + 3), W, B
001418   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00141a   ef1d     goto	0x143a              	GOTO	_00107_DS_
00141c   f00a
                                           ;	.line	46; boot_main.c	count--;
00141e   0eff     movlw	0xff               	MOVLW	0xff
001420   0100     movlb	0                  	BANKSEL	_init_boot_count_1_1
001422   2760     addwf	0x60, 0x1, 0x1     	ADDWF	_init_boot_count_1_1, F, B
001424   0eff     movlw	0xff               	MOVLW	0xff
001426   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 1)
001428   2361     addwfc	0x61, 0x1, 0x1    	ADDWFC	(_init_boot_count_1_1 + 1), F, B
00142a   0eff     movlw	0xff               	MOVLW	0xff
00142c   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 2)
00142e   2362     addwfc	0x62, 0x1, 0x1    	ADDWFC	(_init_boot_count_1_1 + 2), F, B
001430   0eff     movlw	0xff               	MOVLW	0xff
001432   0100     movlb	0                  	BANKSEL	(_init_boot_count_1_1 + 3)
001434   2363     addwfc	0x63, 0x1, 0x1    	ADDWFC	(_init_boot_count_1_1 + 3), F, B
001436   ef04     goto	0x1408              	GOTO	_00105_DS_
001438   f00a
                                           _00107_DS_:
                                           ;	.line	49; boot_main.c	PORTA  = 0x00;
00143a   6a80     clrf	0x80, 0             	CLRF	_PORTA
                                           ;	.line	52; boot_main.c	if((application_data.invalid == 0) && !PORTAbits.RA1)
00143c   0e00     movlw	0                  	MOVLW	LOW(_application_data)
00143e   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
001440   0e20     movlw	0x20               	MOVLW	HIGH(_application_data)
001442   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
001444   0e00     movlw	0                  	MOVLW	UPPER(_application_data)
001446   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
001448   0009     tblrd	*+                 	TBLRD*+	
00144a   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
00144c   f000
00144e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001450   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
001452   ef5d     goto	0x14ba              	GOTO	_00109_DS_
001454   f00a
001456   b280     btfsc	0x80, 0x1, 0       	BTFSC	_PORTAbits, 1
001458   ef5d     goto	0x14ba              	GOTO	_00109_DS_
00145a   f00a
                                           ;	.line	56; boot_main.c	device_descriptor        = application_data.device_descriptor;
00145c   0e01     movlw	0x1                	MOVLW	LOW(_application_data + 1)
00145e   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
001460   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 1)
001462   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
001464   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 1)
001466   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
001468   0009     tblrd	*+                 	TBLRD*+	
00146a   cff5     movff	0xff5, 0x7e        	MOVFF	TABLAT, _device_descriptor
00146c   f07e
00146e   0009     tblrd	*+                 	TBLRD*+	
001470   cff5     movff	0xff5, 0x7f        	MOVFF	TABLAT, (_device_descriptor + 1)
001472   f07f
001474   0009     tblrd	*+                 	TBLRD*+	
001476   cff5     movff	0xff5, 0x80        	MOVFF	TABLAT, (_device_descriptor + 2)
001478   f080
                                           ;	.line	57; boot_main.c	configuration_descriptor = application_data.configuration_descriptor;
00147a   0e04     movlw	0x4                	MOVLW	LOW(_application_data + 4)
00147c   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
00147e   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 4)
001480   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
001482   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 4)
001484   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
001486   0009     tblrd	*+                 	TBLRD*+	
001488   cff5     movff	0xff5, 0x81        	MOVFF	TABLAT, _configuration_descriptor
00148a   f081
00148c   0009     tblrd	*+                 	TBLRD*+	
00148e   cff5     movff	0xff5, 0x82        	MOVFF	TABLAT, (_configuration_descriptor + 1)
001490   f082
001492   0009     tblrd	*+                 	TBLRD*+	
001494   cff5     movff	0xff5, 0x83        	MOVFF	TABLAT, (_configuration_descriptor + 2)
001496   f083
                                           ;	.line	58; boot_main.c	string_descriptor        = application_data.string_descriptor;
001498   0e07     movlw	0x7                	MOVLW	LOW(_application_data + 7)
00149a   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
00149c   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 7)
00149e   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
0014a0   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 7)
0014a2   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
0014a4   0009     tblrd	*+                 	TBLRD*+	
0014a6   cff5     movff	0xff5, 0x84        	MOVFF	TABLAT, _string_descriptor
0014a8   f084
0014aa   0009     tblrd	*+                 	TBLRD*+	
0014ac   cff5     movff	0xff5, 0x85        	MOVFF	TABLAT, (_string_descriptor + 1)
0014ae   f085
0014b0   0009     tblrd	*+                 	TBLRD*+	
0014b2   cff5     movff	0xff5, 0x86        	MOVFF	TABLAT, (_string_descriptor + 2)
0014b4   f086
0014b6   ef78     goto	0x14f0              	GOTO	_00110_DS_
0014b8   f00a
                                           _00109_DS_:
                                           ;	.line	64; boot_main.c	device_descriptor        = &boot_device_descriptor;
0014ba   0e10     movlw	0x10               	MOVLW	LOW(_boot_device_descriptor)
0014bc   0100     movlb	0                  	BANKSEL	_device_descriptor
0014be   6f7e     movwf	0x7e, 0x1          	MOVWF	_device_descriptor, B
0014c0   0e04     movlw	0x4                	MOVLW	HIGH(_boot_device_descriptor)
0014c2   0100     movlb	0                  	BANKSEL	(_device_descriptor + 1)
0014c4   6f7f     movwf	0x7f, 0x1          	MOVWF	(_device_descriptor + 1), B
0014c6   0e00     movlw	0                  	MOVLW	UPPER(_boot_device_descriptor)
0014c8   0100     movlb	0                  	BANKSEL	(_device_descriptor + 2)
0014ca   6f80     movwf	0x80, 0x1          	MOVWF	(_device_descriptor + 2), B
                                           ;	.line	65; boot_main.c	configuration_descriptor = boot_configuration_descriptor;
0014cc   0e54     movlw	0x54               	MOVLW	LOW(_boot_configuration_descriptor)
0014ce   0100     movlb	0                  	BANKSEL	_configuration_descriptor
0014d0   6f81     movwf	0x81, 0x1          	MOVWF	_configuration_descriptor, B
0014d2   0e04     movlw	0x4                	MOVLW	HIGH(_boot_configuration_descriptor)
0014d4   0100     movlb	0                  	BANKSEL	(_configuration_descriptor + 1)
0014d6   6f82     movwf	0x82, 0x1          	MOVWF	(_configuration_descriptor + 1), B
0014d8   0e00     movlw	0                  	MOVLW	UPPER(_boot_configuration_descriptor)
0014da   0100     movlb	0                  	BANKSEL	(_configuration_descriptor + 2)
0014dc   6f83     movwf	0x83, 0x1          	MOVWF	(_configuration_descriptor + 2), B
                                           ;	.line	66; boot_main.c	string_descriptor        = boot_string_descriptor;
0014de   0ebe     movlw	0xbe               	MOVLW	LOW(_boot_string_descriptor)
0014e0   0100     movlb	0                  	BANKSEL	_string_descriptor
0014e2   6f84     movwf	0x84, 0x1          	MOVWF	_string_descriptor, B
0014e4   0e04     movlw	0x4                	MOVLW	HIGH(_boot_string_descriptor)
0014e6   0100     movlb	0                  	BANKSEL	(_string_descriptor + 1)
0014e8   6f85     movwf	0x85, 0x1          	MOVWF	(_string_descriptor + 1), B
0014ea   0e00     movlw	0                  	MOVLW	UPPER(_boot_string_descriptor)
0014ec   0100     movlb	0                  	BANKSEL	(_string_descriptor + 2)
0014ee   6f86     movwf	0x86, 0x1          	MOVWF	(_string_descriptor + 2), B
                                           _00110_DS_:
                                           ;	.line	73; boot_main.c	ep_init  = boot_ep_init;
0014f0   0e30     movlw	0x30               	MOVLW	LOW(_boot_ep_init)
0014f2   0100     movlb	0                  	BANKSEL	_ep_init
0014f4   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep_init, B
0014f6   0e05     movlw	0x5                	MOVLW	HIGH(_boot_ep_init)
0014f8   0100     movlb	0                  	BANKSEL	(_ep_init + 1)
0014fa   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep_init + 1), B
0014fc   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_init)
0014fe   0100     movlb	0                  	BANKSEL	(_ep_init + 2)
001500   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep_init + 2), B
                                           ;	.line	74; boot_main.c	ep_in    = boot_ep_in;
001502   0e9a     movlw	0x9a               	MOVLW	LOW(_boot_ep_in)
001504   0100     movlb	0                  	BANKSEL	_ep_in
001506   6f93     movwf	0x93, 0x1          	MOVWF	_ep_in, B
001508   0e05     movlw	0x5                	MOVLW	HIGH(_boot_ep_in)
00150a   0100     movlb	0                  	BANKSEL	(_ep_in + 1)
00150c   6f94     movwf	0x94, 0x1          	MOVWF	(_ep_in + 1), B
00150e   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_in)
001510   0100     movlb	0                  	BANKSEL	(_ep_in + 2)
001512   6f95     movwf	0x95, 0x1          	MOVWF	(_ep_in + 2), B
                                           ;	.line	75; boot_main.c	ep_out   = boot_ep_out;
001514   0e04     movlw	0x4                	MOVLW	LOW(_boot_ep_out)
001516   0100     movlb	0                  	BANKSEL	_ep_out
001518   6f90     movwf	0x90, 0x1          	MOVWF	_ep_out, B
00151a   0e06     movlw	0x6                	MOVLW	HIGH(_boot_ep_out)
00151c   0100     movlb	0                  	BANKSEL	(_ep_out + 1)
00151e   6f91     movwf	0x91, 0x1          	MOVWF	(_ep_out + 1), B
001520   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_out)
001522   0100     movlb	0                  	BANKSEL	(_ep_out + 2)
001524   6f92     movwf	0x92, 0x1          	MOVWF	(_ep_out + 2), B
                                           ;	.line	76; boot_main.c	ep_setup = boot_ep_setup;
001526   0e3e     movlw	0x3e               	MOVLW	LOW(_boot_ep_setup)
001528   0100     movlb	0                  	BANKSEL	_ep_setup
00152a   6f8d     movwf	0x8d, 0x1          	MOVWF	_ep_setup, B
00152c   0e06     movlw	0x6                	MOVLW	HIGH(_boot_ep_setup)
00152e   0100     movlb	0                  	BANKSEL	(_ep_setup + 1)
001530   6f8e     movwf	0x8e, 0x1          	MOVWF	(_ep_setup + 1), B
001532   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_setup)
001534   0100     movlb	0                  	BANKSEL	(_ep_setup + 2)
001536   6f8f     movwf	0x8f, 0x1          	MOVWF	(_ep_setup + 2), B
001538   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00153a   f000
00153c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00153e   ffd9
001540   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  488 (0x01e8) bytes ( 0.37%)
                                           ;           	  244 (0x00f4) words
                                           ; udata size:	  259 (0x0103) bytes (14.45%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:17 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	__config 0x300000, 0xe0
                                           	__config 0x300001, 0x3e
                                           	__config 0x300002, 0xf8
                                           	__config 0x300003, 0xe0
                                           	__config 0x300005, 0xfc
                                           	__config 0x300006, 0x9a
                                           	__config 0x300008, 0xff
                                           	__config 0x300009, 0xff
                                           	__config 0x30000a, 0xfe
                                           	__config 0x30000b, 0x9f
                                           	__config 0x30000c, 0xff
                                           	__config 0x30000d, 0xff
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _section_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _ep2_num_bytes_to_send
                                           	extern _ep2_source_data
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _section_descriptor:
0003fa   0103     movlb	0x3                	DB	0x03, 0x01, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x03, 0x00, 0x20, 0x00
0003fc   0000     nop                      
0003fe   ff00     dw	0xff00  ;unknown opcode 
000400   001f     dw	0x1f  ;unknown opcode 
000402   0003     sleep                    
000404   0020     dw	0x20  ;unknown opcode 
000406   7fff     btg	0xff, 0x7, 0x1       	DB	0xff, 0x7f, 0x00, 0x01, 0x00, 0x00, 0x30, 0x0d, 0x00, 0x30
000408   0100     movlb	0                  
00040a   0000     nop                      
00040c   0d30     mullw	0x30               
00040e   3000     rrcf	0, 0, 0             
                                           
                                           
                                           ; Statistics:
                                           ; code size:	    6 (0x0006) bytes ( 0.00%)
                                           ;           	    3 (0x0003) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:17 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ep0_init
                                           	global _ep0_in
                                           	global _ep0_setup
                                           	global _SetupBuffer
                                           	global _InBuffer
                                           	global _ep0_usb_std_request
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrget3
                                           	extern __gptrget2
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _fill_in_buffer
                                           	extern _section_descriptor
                                           	extern _application_data
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           INTCON	equ	0xff2
                                           WREG	equ	0xfe8
                                           TOSL	equ	0xffd
                                           TOSH	equ	0xffe
                                           TOSU	equ	0xfff
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           
                                           usb_buf	udata
                                           _SetupBuffer	res	8
                                           _InBuffer	res	8
                                           
                                           udata_ep0_0	udata
                                           _ep0_state	res	1
                                           
                                           udata_ep0_1	udata
                                           _num_bytes_to_be_send	res	2
                                           
                                           udata_ep0_2	udata
                                           _sourceData	res	3
                                           
                                           udata_ep0_3	udata
                                           _coming_cfg	res	1
                                           
                                           udata_ep0_4	udata
                                           _ep0_usb_std_request_unknown_request_1_1	res	1
                                           
                                           udata_ep0_5	udata
                                           _ep0_in_i_3_17	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ep0__ep0_setup	code
                                           _ep0_setup:
                                           ;	.line	238; ep0.c	void ep0_setup(void)
001258   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00125a   ffe5
00125c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00125e   ffd9
001260   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001262   ffe5
001264   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001266   ffe5
001268   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00126a   ffe5
00126c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00126e   ffe5
001270   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001272   ffe5
001274   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001276   ffe5
001278   0100     movlb	0                  	BANKSEL	_ep0_state
                                           ;	.line	242; ep0.c	ep0_state = WAIT_SETUP;
00127a   6ba2     clrf	0xa2, 0x1           	CLRF	_ep0_state, B
00127c   0100     movlb	0                  	BANKSEL	_num_bytes_to_be_send
                                           ;	.line	243; ep0.c	num_bytes_to_be_send = 0;
00127e   6b96     clrf	0x96, 0x1           	CLRF	_num_bytes_to_be_send, B
001280   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
001282   6b97     clrf	0x97, 0x1           	CLRF	(_num_bytes_to_be_send + 1), B
                                           ;	.line	245; ep0.c	if(ep0_usb_std_request())
001284   ec5c     call	0x6b8, 0            	CALL	_ep0_usb_std_request
001286   f003
001288   6e00     movwf	0, 0               	MOVWF	r0x00
00128a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00128c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00128e   efc9     goto	0x1392              	GOTO	_00225_DS_
001290   f009
                                           ;	.line	247; ep0.c	UCONbits.PKTDIS = 0;
001292   986d     bcf	0x6d, 0x4, 0         	BCF	_UCONbits, 4
                                           ;	.line	248; ep0.c	if(SetupBuffer.data_transfer_direction == DEVICE_TO_HOST)
001294   6a00     clrf	0, 0                	CLRF	r0x00
001296   0105     movlb	0x5                	BANKSEL	_SetupBuffer
001298   bf00     btfsc	0, 0x7, 0x1        	BTFSC	_SetupBuffer, 7, B
00129a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00129c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00129e   0a01     xorlw	0x1                	XORLW	0x01
0012a0   e102     bnz	0x12a6               	BNZ	_00232_DS_
0012a2   ef55     goto	0x12aa              	GOTO	_00233_DS_
0012a4   f009
                                           _00232_DS_:
0012a6   efaf     goto	0x135e              	GOTO	_00222_DS_
0012a8   f009
                                           _00233_DS_:
                                           ;	.line	250; ep0.c	ep0_state = WAIT_IN;
0012aa   0e01     movlw	0x1                	MOVLW	0x01
0012ac   0100     movlb	0                  	BANKSEL	_ep0_state
0012ae   6fa2     movwf	0xa2, 0x1          	MOVWF	_ep0_state, B
                                           ;	.line	252; ep0.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
0012b0   0e08     movlw	0x8                	MOVLW	0x08
0012b2   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 1)
0012b4   6f01     movwf	0x1, 0x1           	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	253; ep0.c	EP_OUT_BD(0).ADR = (uchar __data *)&SetupBuffer;            
0012b6   0e00     movlw	0                  	MOVLW	LOW(_SetupBuffer)
0012b8   6e00     movwf	0, 0               	MOVWF	r0x00
0012ba   0e05     movlw	0x5                	MOVLW	HIGH(_SetupBuffer)
0012bc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0012be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012c0   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 2)
0012c2   6f02     movwf	0x2, 0x1           	MOVWF	(_ep_bdt + 2), B
0012c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012c6   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 3)
0012c8   6f03     movwf	0x3, 0x1           	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	254; ep0.c	EP_OUT_BD(0).Stat.uc = BDS_USIE;
0012ca   0e80     movlw	0x80               	MOVLW	0x80
0012cc   0104     movlb	0x4                	BANKSEL	_ep_bdt
0012ce   6f00     movwf	0, 0x1             	MOVWF	_ep_bdt, B
                                           ;	.line	256; ep0.c	EP_IN_BD(0).ADR = (uchar __data *)InBuffer;
0012d0   0e08     movlw	0x8                	MOVLW	LOW(_InBuffer)
0012d2   6e00     movwf	0, 0               	MOVWF	r0x00
0012d4   0e05     movlw	0x5                	MOVLW	HIGH(_InBuffer)
0012d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0012d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0012da   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 6)
0012dc   6f06     movwf	0x6, 0x1           	MOVWF	(_ep_bdt + 6), B
0012de   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0012e0   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 7)
0012e2   6f07     movwf	0x7, 0x1           	MOVWF	(_ep_bdt + 7), B
                                           ;	.line	257; ep0.c	if(SetupBuffer.wLength < num_bytes_to_be_send)
0012e4   ee05     lfsr	0, 0x506            	LFSR	0x00, (_SetupBuffer + 6)
0012e6   f006
0012e8   cfee     movff	0xfee, 0           	MOVFF	POSTINC0, r0x00
0012ea   f000
0012ec   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0012ee   f001
0012f0   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
0012f2   5197     movf	0x97, 0, 0x1        	MOVF	(_num_bytes_to_be_send + 1), W, B
0012f4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0012f6   e103     bnz	0x12fe               	BNZ	_00234_DS_
0012f8   0100     movlb	0                  	BANKSEL	_num_bytes_to_be_send
0012fa   5196     movf	0x96, 0, 0x1        	MOVF	_num_bytes_to_be_send, W, B
0012fc   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00234_DS_:
0012fe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001300   ef88     goto	0x1310              	GOTO	_00220_DS_
001302   f009
                                           ;	.line	259; ep0.c	num_bytes_to_be_send = SetupBuffer.wLength;
001304   ee05     lfsr	0, 0x506            	LFSR	0x00, (_SetupBuffer + 6)
001306   f006
001308   cfee     movff	0xfee, 0x96        	MOVFF	POSTINC0, _num_bytes_to_be_send
00130a   f096
00130c   cfef     movff	0xfef, 0x97        	MOVFF	INDF0, (_num_bytes_to_be_send + 1)
00130e   f097
                                           _00220_DS_:
                                           ;	.line	261; ep0.c	fill_in_buffer(0, &sourceData, EP0_BUFFER_SIZE, &num_bytes_to_be_send);
001310   0e00     movlw	0                  	MOVLW	HIGH(_sourceData)
001312   6e01     movwf	0x1, 0             	MOVWF	r0x01
001314   0e78     movlw	0x78               	MOVLW	LOW(_sourceData)
001316   6e00     movwf	0, 0               	MOVWF	r0x00
001318   0e80     movlw	0x80               	MOVLW	0x80
00131a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00131c   0e00     movlw	0                  	MOVLW	HIGH(_num_bytes_to_be_send)
00131e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001320   0e96     movlw	0x96               	MOVLW	LOW(_num_bytes_to_be_send)
001322   6e03     movwf	0x3, 0             	MOVWF	r0x03
001324   0e80     movlw	0x80               	MOVLW	0x80
001326   6e05     movwf	0x5, 0             	MOVWF	r0x05
001328   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00132a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00132c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00132e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001330   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001332   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001334   0e00     movlw	0                  	MOVLW	0x00
001336   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001338   0e08     movlw	0x8                	MOVLW	0x08
00133a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00133c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00133e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001340   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001342   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001344   5000     movf	0, 0, 0             	MOVF	r0x00, W
001346   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001348   0e00     movlw	0                  	MOVLW	0x00
00134a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00134c   ec29     call	0x1052, 0           	CALL	_fill_in_buffer
00134e   f008
001350   0e09     movlw	0x9                	MOVLW	0x09
001352   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	262; ep0.c	EP_IN_BD(0).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
001354   0ec8     movlw	0xc8               	MOVLW	0xc8
001356   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
001358   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
00135a   efdd     goto	0x13ba              	GOTO	_00227_DS_
00135c   f009
                                           _00222_DS_:
                                           ;	.line	267; ep0.c	ep0_state = WAIT_OUT;
00135e   0e02     movlw	0x2                	MOVLW	0x02
001360   0100     movlb	0                  	BANKSEL	_ep0_state
001362   6fa2     movwf	0xa2, 0x1          	MOVWF	_ep0_state, B
                                           ;	.line	269; ep0.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
001364   0e08     movlw	0x8                	MOVLW	0x08
001366   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 1)
001368   6f01     movwf	0x1, 0x1           	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	270; ep0.c	EP_OUT_BD(0).ADR = (uchar __data *)InBuffer;
00136a   0e08     movlw	0x8                	MOVLW	LOW(_InBuffer)
00136c   6e00     movwf	0, 0               	MOVWF	r0x00
00136e   0e05     movlw	0x5                	MOVLW	HIGH(_InBuffer)
001370   6e01     movwf	0x1, 0             	MOVWF	r0x01
001372   5000     movf	0, 0, 0             	MOVF	r0x00, W
001374   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 2)
001376   6f02     movwf	0x2, 0x1           	MOVWF	(_ep_bdt + 2), B
001378   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00137a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 3)
00137c   6f03     movwf	0x3, 0x1           	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	271; ep0.c	EP_OUT_BD(0).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
00137e   0ec8     movlw	0xc8               	MOVLW	0xc8
001380   0104     movlb	0x4                	BANKSEL	_ep_bdt
001382   6f00     movwf	0, 0x1             	MOVWF	_ep_bdt, B
001384   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 5)
                                           ;	.line	273; ep0.c	EP_IN_BD(0).Cnt = 0;
001386   6b05     clrf	0x5, 0x1            	CLRF	(_ep_bdt + 5), B
                                           ;	.line	274; ep0.c	EP_IN_BD(0).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
001388   0ec8     movlw	0xc8               	MOVLW	0xc8
00138a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
00138c   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
00138e   efdd     goto	0x13ba              	GOTO	_00227_DS_
001390   f009
                                           _00225_DS_:
                                           ;	.line	280; ep0.c	UCONbits.PKTDIS = 0;
001392   986d     bcf	0x6d, 0x4, 0         	BCF	_UCONbits, 4
                                           ;	.line	281; ep0.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
001394   0e08     movlw	0x8                	MOVLW	0x08
001396   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 1)
001398   6f01     movwf	0x1, 0x1           	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	282; ep0.c	EP_OUT_BD(0).ADR = (uchar __data *)&SetupBuffer;
00139a   0e00     movlw	0                  	MOVLW	LOW(_SetupBuffer)
00139c   6e00     movwf	0, 0               	MOVWF	r0x00
00139e   0e05     movlw	0x5                	MOVLW	HIGH(_SetupBuffer)
0013a0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0013a2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013a4   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 2)
0013a6   6f02     movwf	0x2, 0x1           	MOVWF	(_ep_bdt + 2), B
0013a8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0013aa   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 3)
0013ac   6f03     movwf	0x3, 0x1           	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	283; ep0.c	EP_OUT_BD(0).Stat.uc = BDS_USIE | BDS_BSTALL;
0013ae   0e84     movlw	0x84               	MOVLW	0x84
0013b0   0104     movlb	0x4                	BANKSEL	_ep_bdt
0013b2   6f00     movwf	0, 0x1             	MOVWF	_ep_bdt, B
                                           ;	.line	285; ep0.c	EP_IN_BD(0).Stat.uc  = BDS_USIE | BDS_BSTALL;
0013b4   0e84     movlw	0x84               	MOVLW	0x84
0013b6   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
0013b8   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
                                           _00227_DS_:
0013ba   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0013bc   f005
0013be   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0013c0   f004
0013c2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0013c4   f003
0013c6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0013c8   f002
0013ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0013cc   f001
0013ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0013d0   f000
0013d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0013d4   ffd9
0013d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep0__ep0_in	code
                                           _ep0_in:
                                           ;	.line	154; ep0.c	void ep0_in(void)
00096e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000970   ffe5
000972   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000974   ffd9
000976   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000978   ffe5
00097a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00097c   ffe5
00097e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000980   ffe5
000982   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000984   ffe5
000986   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000988   ffe5
00098a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00098c   ffe5
                                           ;	.line	157; ep0.c	if(GET_DEVICE_STATE() == ADDRESS_PENDING_STATE)
00098e   505f     movf	0x5f, 0, 0          	MOVF	_usb_device_state, W
000990   0a04     xorlw	0x4                	XORLW	0x04
000992   e102     bnz	0x998                	BNZ	_00207_DS_
000994   efce     goto	0x99c               	GOTO	_00208_DS_
000996   f004
                                           _00207_DS_:
000998   efdc     goto	0x9b8               	GOTO	_00174_DS_
00099a   f004
                                           _00208_DS_:
                                           ;	.line	159; ep0.c	UADDR = SetupBuffer.bAddress;
00099c   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
00099e   f002
0009a0   cfef     movff	0xfef, 0xf6e       	MOVFF	INDF0, _UADDR
0009a2   ff6e
                                           ;	.line	160; ep0.c	if(UADDR != 0)
0009a4   506e     movf	0x6e, 0, 0          	MOVF	_UADDR, W
0009a6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0009a8   efda     goto	0x9b4               	GOTO	_00171_DS_
0009aa   f004
                                           ;	.line	162; ep0.c	SET_DEVICE_STATE(ADDRESS_STATE);
0009ac   0e05     movlw	0x5                	MOVLW	0x05
0009ae   6e5f     movwf	0x5f, 0            	MOVWF	_usb_device_state
0009b0   efdc     goto	0x9b8               	GOTO	_00174_DS_
0009b2   f004
                                           _00171_DS_:
                                           ;	.line	166; ep0.c	SET_DEVICE_STATE(DEFAULT_STATE);
0009b4   0e03     movlw	0x3                	MOVLW	0x03
0009b6   6e5f     movwf	0x5f, 0            	MOVWF	_usb_device_state
                                           _00174_DS_:
0009b8   0100     movlb	0                  	BANKSEL	_ep0_state
                                           ;	.line	170; ep0.c	if(ep0_state == WAIT_IN)
0009ba   51a2     movf	0xa2, 0, 0x1        	MOVF	_ep0_state, W, B
0009bc   0a01     xorlw	0x1                	XORLW	0x01
0009be   e102     bnz	0x9c4                	BNZ	_00209_DS_
0009c0   efe4     goto	0x9c8               	GOTO	_00210_DS_
0009c2   f004
                                           _00209_DS_:
0009c4   ef14     goto	0xa28               	GOTO	_00179_DS_
0009c6   f005
                                           _00210_DS_:
                                           ;	.line	172; ep0.c	fill_in_buffer(0, &sourceData, EP0_BUFFER_SIZE, &num_bytes_to_be_send);
0009c8   0e00     movlw	0                  	MOVLW	HIGH(_sourceData)
0009ca   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009cc   0e78     movlw	0x78               	MOVLW	LOW(_sourceData)
0009ce   6e00     movwf	0, 0               	MOVWF	r0x00
0009d0   0e80     movlw	0x80               	MOVLW	0x80
0009d2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009d4   0e00     movlw	0                  	MOVLW	HIGH(_num_bytes_to_be_send)
0009d6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0009d8   0e96     movlw	0x96               	MOVLW	LOW(_num_bytes_to_be_send)
0009da   6e03     movwf	0x3, 0             	MOVWF	r0x03
0009dc   0e80     movlw	0x80               	MOVLW	0x80
0009de   6e05     movwf	0x5, 0             	MOVWF	r0x05
0009e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0009e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ec   0e00     movlw	0                  	MOVLW	0x00
0009ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009f0   0e08     movlw	0x8                	MOVLW	0x08
0009f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009f8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a00   0e00     movlw	0                  	MOVLW	0x00
000a02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a04   ec29     call	0x1052, 0           	CALL	_fill_in_buffer
000a06   f008
000a08   0e09     movlw	0x9                	MOVLW	0x09
000a0a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000a0c   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	174; ep0.c	if(EP_IN_BD(0).Stat.DTS == 0)
000a0e   bd04     btfsc	0x4, 0x6, 0x1      	BTFSC	(_ep_bdt + 4), 6, B
000a10   ef0f     goto	0xa1e               	GOTO	_00176_DS_
000a12   f005
                                           ;	.line	176; ep0.c	EP_IN_BD(0).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
000a14   0ec8     movlw	0xc8               	MOVLW	0xc8
000a16   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
000a18   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
000a1a   ef16     goto	0xa2c               	GOTO	_00180_DS_
000a1c   f005
                                           _00176_DS_:
                                           ;	.line	180; ep0.c	EP_IN_BD(0).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
000a1e   0e88     movlw	0x88               	MOVLW	0x88
000a20   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
000a22   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
000a24   ef16     goto	0xa2c               	GOTO	_00180_DS_
000a26   f005
                                           _00179_DS_:
                                           ;	.line	185; ep0.c	ep0_init();
000a28   ecbe     call	0x197c, 0           	CALL	_ep0_init
000a2a   f00c
                                           _00180_DS_:
                                           ;	.line	188; ep0.c	if(GET_DEVICE_STATE() == CONFIGURATION_PENDING_STATE)
000a2c   505f     movf	0x5f, 0, 0          	MOVF	_usb_device_state, W
000a2e   0a06     xorlw	0x6                	XORLW	0x06
000a30   e102     bnz	0xa36                	BNZ	_00211_DS_
000a32   ef1d     goto	0xa3a               	GOTO	_00212_DS_
000a34   f005
                                           _00211_DS_:
000a36   effe     goto	0xbfc               	GOTO	_00193_DS_
000a38   f005
                                           _00212_DS_:
                                           ;	.line	193; ep0.c	UEP1  = 0; UEP2  = 0; UEP3  = 0; UEP4  = 0;
000a3a   6a71     clrf	0x71, 0             	CLRF	_UEP1
000a3c   6a72     clrf	0x72, 0             	CLRF	_UEP2
000a3e   6a73     clrf	0x73, 0             	CLRF	_UEP3
000a40   6a74     clrf	0x74, 0             	CLRF	_UEP4
                                           ;	.line	194; ep0.c	UEP5  = 0; UEP6  = 0; UEP7  = 0; UEP8  = 0;
000a42   6a75     clrf	0x75, 0             	CLRF	_UEP5
000a44   6a76     clrf	0x76, 0             	CLRF	_UEP6
000a46   6a77     clrf	0x77, 0             	CLRF	_UEP7
000a48   6a78     clrf	0x78, 0             	CLRF	_UEP8
                                           ;	.line	195; ep0.c	UEP9  = 0; UEP10 = 0; UEP11 = 0; UEP12 = 0;
000a4a   6a79     clrf	0x79, 0             	CLRF	_UEP9
000a4c   6a7a     clrf	0x7a, 0             	CLRF	_UEP10
000a4e   6a7b     clrf	0x7b, 0             	CLRF	_UEP11
000a50   6a7c     clrf	0x7c, 0             	CLRF	_UEP12
                                           ;	.line	196; ep0.c	UEP13 = 0; UEP14 = 0; UEP15 = 0;
000a52   6a7d     clrf	0x7d, 0             	CLRF	_UEP13
000a54   6a7e     clrf	0x7e, 0             	CLRF	_UEP14
000a56   6a7f     clrf	0x7f, 0             	CLRF	_UEP15
                                           ;	.line	199; ep0.c	if(coming_cfg <= FLASH_CONFIGURATION)
000a58   0e03     movlw	0x3                	MOVLW	0x03
000a5a   0100     movlb	0                  	BANKSEL	_coming_cfg
000a5c   5da3     subwf	0xa3, 0, 0x1       	SUBWF	_coming_cfg, W, B
000a5e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a60   ef58     goto	0xab0               	GOTO	_00182_DS_
000a62   f005
                                           ;	.line	202; ep0.c	ep_init  = boot_ep_init;
000a64   0e30     movlw	0x30               	MOVLW	LOW(_boot_ep_init)
000a66   0100     movlb	0                  	BANKSEL	_ep_init
000a68   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep_init, B
000a6a   0e05     movlw	0x5                	MOVLW	HIGH(_boot_ep_init)
000a6c   0100     movlb	0                  	BANKSEL	(_ep_init + 1)
000a6e   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep_init + 1), B
000a70   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_init)
000a72   0100     movlb	0                  	BANKSEL	(_ep_init + 2)
000a74   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep_init + 2), B
                                           ;	.line	203; ep0.c	ep_in    = boot_ep_in;
000a76   0e9a     movlw	0x9a               	MOVLW	LOW(_boot_ep_in)
000a78   0100     movlb	0                  	BANKSEL	_ep_in
000a7a   6f93     movwf	0x93, 0x1          	MOVWF	_ep_in, B
000a7c   0e05     movlw	0x5                	MOVLW	HIGH(_boot_ep_in)
000a7e   0100     movlb	0                  	BANKSEL	(_ep_in + 1)
000a80   6f94     movwf	0x94, 0x1          	MOVWF	(_ep_in + 1), B
000a82   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_in)
000a84   0100     movlb	0                  	BANKSEL	(_ep_in + 2)
000a86   6f95     movwf	0x95, 0x1          	MOVWF	(_ep_in + 2), B
                                           ;	.line	204; ep0.c	ep_out   = boot_ep_out;
000a88   0e04     movlw	0x4                	MOVLW	LOW(_boot_ep_out)
000a8a   0100     movlb	0                  	BANKSEL	_ep_out
000a8c   6f90     movwf	0x90, 0x1          	MOVWF	_ep_out, B
000a8e   0e06     movlw	0x6                	MOVLW	HIGH(_boot_ep_out)
000a90   0100     movlb	0                  	BANKSEL	(_ep_out + 1)
000a92   6f91     movwf	0x91, 0x1          	MOVWF	(_ep_out + 1), B
000a94   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_out)
000a96   0100     movlb	0                  	BANKSEL	(_ep_out + 2)
000a98   6f92     movwf	0x92, 0x1          	MOVWF	(_ep_out + 2), B
                                           ;	.line	205; ep0.c	ep_setup = boot_ep_setup;
000a9a   0e3e     movlw	0x3e               	MOVLW	LOW(_boot_ep_setup)
000a9c   0100     movlb	0                  	BANKSEL	_ep_setup
000a9e   6f8d     movwf	0x8d, 0x1          	MOVWF	_ep_setup, B
000aa0   0e06     movlw	0x6                	MOVLW	HIGH(_boot_ep_setup)
000aa2   0100     movlb	0                  	BANKSEL	(_ep_setup + 1)
000aa4   6f8e     movwf	0x8e, 0x1          	MOVWF	(_ep_setup + 1), B
000aa6   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_setup)
000aa8   0100     movlb	0                  	BANKSEL	(_ep_setup + 2)
000aaa   6f8f     movwf	0x8f, 0x1          	MOVWF	(_ep_setup + 2), B
000aac   ef94     goto	0xb28               	GOTO	_00183_DS_
000aae   f005
                                           _00182_DS_:
                                           ;	.line	210; ep0.c	ep_init  = application_data.ep_init;
000ab0   0e0a     movlw	0xa                	MOVLW	LOW(_application_data + 10)
000ab2   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000ab4   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 10)
000ab6   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000ab8   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 10)
000aba   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000abc   0009     tblrd	*+                 	TBLRD*+	
000abe   cff5     movff	0xff5, 0x8a        	MOVFF	TABLAT, _ep_init
000ac0   f08a
000ac2   0009     tblrd	*+                 	TBLRD*+	
000ac4   cff5     movff	0xff5, 0x8b        	MOVFF	TABLAT, (_ep_init + 1)
000ac6   f08b
000ac8   0009     tblrd	*+                 	TBLRD*+	
000aca   cff5     movff	0xff5, 0x8c        	MOVFF	TABLAT, (_ep_init + 2)
000acc   f08c
                                           ;	.line	211; ep0.c	ep_in    = application_data.ep_in;
000ace   0e0d     movlw	0xd                	MOVLW	LOW(_application_data + 13)
000ad0   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000ad2   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 13)
000ad4   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000ad6   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 13)
000ad8   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000ada   0009     tblrd	*+                 	TBLRD*+	
000adc   cff5     movff	0xff5, 0x93        	MOVFF	TABLAT, _ep_in
000ade   f093
000ae0   0009     tblrd	*+                 	TBLRD*+	
000ae2   cff5     movff	0xff5, 0x94        	MOVFF	TABLAT, (_ep_in + 1)
000ae4   f094
000ae6   0009     tblrd	*+                 	TBLRD*+	
000ae8   cff5     movff	0xff5, 0x95        	MOVFF	TABLAT, (_ep_in + 2)
000aea   f095
                                           ;	.line	212; ep0.c	ep_out   = application_data.ep_out;
000aec   0e10     movlw	0x10               	MOVLW	LOW(_application_data + 16)
000aee   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000af0   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 16)
000af2   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000af4   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 16)
000af6   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000af8   0009     tblrd	*+                 	TBLRD*+	
000afa   cff5     movff	0xff5, 0x90        	MOVFF	TABLAT, _ep_out
000afc   f090
000afe   0009     tblrd	*+                 	TBLRD*+	
000b00   cff5     movff	0xff5, 0x91        	MOVFF	TABLAT, (_ep_out + 1)
000b02   f091
000b04   0009     tblrd	*+                 	TBLRD*+	
000b06   cff5     movff	0xff5, 0x92        	MOVFF	TABLAT, (_ep_out + 2)
000b08   f092
                                           ;	.line	213; ep0.c	ep_setup = application_data.ep_setup;
000b0a   0e13     movlw	0x13               	MOVLW	LOW(_application_data + 19)
000b0c   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000b0e   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 19)
000b10   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000b12   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 19)
000b14   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000b16   0009     tblrd	*+                 	TBLRD*+	
000b18   cff5     movff	0xff5, 0x8d        	MOVFF	TABLAT, _ep_setup
000b1a   f08d
000b1c   0009     tblrd	*+                 	TBLRD*+	
000b1e   cff5     movff	0xff5, 0x8e        	MOVFF	TABLAT, (_ep_setup + 1)
000b20   f08e
000b22   0009     tblrd	*+                 	TBLRD*+	
000b24   cff5     movff	0xff5, 0x8f        	MOVFF	TABLAT, (_ep_setup + 2)
000b26   f08f
                                           _00183_DS_:
                                           ;	.line	216; ep0.c	SET_ACTIVE_CONFIGURATION(coming_cfg);
000b28   c0a3     movff	0xa3, 0x5e         	MOVFF	_coming_cfg, _usb_active_cfg
000b2a   f05e
000b2c   0100     movlb	0                  	BANKSEL	_coming_cfg
                                           ;	.line	218; ep0.c	if(coming_cfg == 0)
000b2e   51a3     movf	0xa3, 0, 0x1        	MOVF	_coming_cfg, W, B
000b30   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
000b32   ef9f     goto	0xb3e               	GOTO	_00185_DS_
000b34   f005
                                           ;	.line	220; ep0.c	SET_DEVICE_STATE(ADDRESS_STATE);
000b36   0e05     movlw	0x5                	MOVLW	0x05
000b38   6e5f     movwf	0x5f, 0            	MOVWF	_usb_device_state
000b3a   effe     goto	0xbfc               	GOTO	_00193_DS_
000b3c   f005
                                           _00185_DS_:
                                           ;	.line	227; ep0.c	for(i = 15; i > 0; i--)
000b3e   0e0f     movlw	0xf                	MOVLW	0x0f
000b40   0100     movlb	0                  	BANKSEL	_ep0_in_i_3_17
000b42   6fa5     movwf	0xa5, 0x1          	MOVWF	_ep0_in_i_3_17, B
                                           _00189_DS_:
000b44   0100     movlb	0                  	BANKSEL	_ep0_in_i_3_17
000b46   51a5     movf	0xa5, 0, 0x1        	MOVF	_ep0_in_i_3_17, W, B
000b48   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000b4a   efab     goto	0xb56               	GOTO	_00195_DS_
000b4c   f005
000b4e   0e01     movlw	0x1                	MOVLW	0x01
000b50   6e00     movwf	0, 0               	MOVWF	r0x00
000b52   efac     goto	0xb58               	GOTO	_00196_DS_
000b54   f005
                                           _00195_DS_:
000b56   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00196_DS_:
000b58   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b5a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000b5c   effc     goto	0xbf8               	GOTO	_00192_DS_
000b5e   f005
                                           ; ;multiply lit val:0x03 by variable _coming_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000b60   0100     movlb	0                  	BANKSEL	_coming_cfg
                                           ;	.line	230; ep0.c	ep_init[coming_cfg][i]();
000b62   51a3     movf	0xa3, 0, 0x1        	MOVF	_coming_cfg, W, B
000b64   0d03     mullw	0x3                	MULLW	0x03
000b66   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000b68   f000
000b6a   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
000b6c   f001
000b6e   0100     movlb	0                  	BANKSEL	_ep_init
000b70   518a     movf	0x8a, 0, 0x1        	MOVF	_ep_init, W, B
000b72   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b74   0100     movlb	0                  	BANKSEL	(_ep_init + 1)
000b76   518b     movf	0x8b, 0, 0x1        	MOVF	(_ep_init + 1), W, B
000b78   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b7a   0100     movlb	0                  	BANKSEL	(_ep_init + 2)
000b7c   518c     movf	0x8c, 0, 0x1        	MOVF	(_ep_init + 2), W, B
000b7e   6a02     clrf	0x2, 0              	CLRF	r0x02
000b80   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b82   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000b84   ffe9
000b86   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000b88   fff3
000b8a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b8c   ec03     call	0x1a06, 0           	CALL	__gptrget3
000b8e   f00d
000b90   6e00     movwf	0, 0               	MOVWF	r0x00
000b92   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000b94   f001
000b96   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000b98   f002
                                           ; ;multiply lit val:0x03 by variable _ep0_in_i_3_17 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000b9a   0100     movlb	0                  	BANKSEL	_ep0_in_i_3_17
000b9c   51a5     movf	0xa5, 0, 0x1        	MOVF	_ep0_in_i_3_17, W, B
000b9e   0d03     mullw	0x3                	MULLW	0x03
000ba0   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000ba2   f003
000ba4   cff4     movff	0xff4, 0x4         	MOVFF	PRODH, r0x04
000ba6   f004
000ba8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000baa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000bae   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000bb0   6ae8     clrf	0xe8, 0             	CLRF	WREG
000bb2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000bb4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000bb6   ffe9
000bb8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000bba   fff3
000bbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bbe   ec03     call	0x1a06, 0           	CALL	__gptrget3
000bc0   f00d
000bc2   6e00     movwf	0, 0               	MOVWF	r0x00
000bc4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000bc6   f001
000bc8   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000bca   f002
000bcc   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
000bce   ffe5
000bd0   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
000bd2   0005     push                     	PUSH	
000bd4   0ef0     movlw	0xf0               	MOVLW	LOW(_00214_DS_)
000bd6   6efd     movwf	0xfd, 0            	MOVWF	TOSL
000bd8   0e0b     movlw	0xb                	MOVLW	HIGH(_00214_DS_)
000bda   6efe     movwf	0xfe, 0            	MOVWF	TOSH
000bdc   0e00     movlw	0                  	MOVLW	UPPER(_00214_DS_)
000bde   6eff     movwf	0xff, 0            	MOVWF	TOSU
000be0   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000be2   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
000be4   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
000be6   fffb
000be8   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
000bea   fffa
000bec   5000     movf	0, 0, 0             	MOVF	r0x00, W
000bee   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00214_DS_:
000bf0   0100     movlb	0                  	BANKSEL	_ep0_in_i_3_17
                                           ;	.line	227; ep0.c	for(i = 15; i > 0; i--)
000bf2   07a5     decf	0xa5, 0x1, 0x1      	DECF	_ep0_in_i_3_17, F, B
000bf4   efa2     goto	0xb44               	GOTO	_00189_DS_
000bf6   f005
                                           _00192_DS_:
                                           ;	.line	233; ep0.c	SET_DEVICE_STATE(CONFIGURED_STATE);
000bf8   0e07     movlw	0x7                	MOVLW	0x07
000bfa   6e5f     movwf	0x5f, 0            	MOVWF	_usb_device_state
                                           _00193_DS_:
000bfc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000bfe   f005
000c00   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000c02   f004
000c04   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000c06   f003
000c08   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000c0a   f002
000c0c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000c0e   f001
000c10   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000c12   f000
000c14   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000c16   ffd9
000c18   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep0__ep0_init	code
                                           _ep0_init:
                                           ;	.line	144; ep0.c	void ep0_init(void)
00197c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00197e   ffe5
001980   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001982   ffd9
001984   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001986   ffe5
001988   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00198a   ffe5
00198c   0100     movlb	0                  	BANKSEL	_ep0_state
                                           ;	.line	146; ep0.c	ep0_state = WAIT_SETUP;
00198e   6ba2     clrf	0xa2, 0x1           	CLRF	_ep0_state, B
                                           ;	.line	147; ep0.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
001990   0e08     movlw	0x8                	MOVLW	0x08
001992   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 1)
001994   6f01     movwf	0x1, 0x1           	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	148; ep0.c	EP_OUT_BD(0).ADR = (uchar __data *)&SetupBuffer;
001996   0e00     movlw	0                  	MOVLW	LOW(_SetupBuffer)
001998   6e00     movwf	0, 0               	MOVWF	r0x00
00199a   0e05     movlw	0x5                	MOVLW	HIGH(_SetupBuffer)
00199c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00199e   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019a0   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 2)
0019a2   6f02     movwf	0x2, 0x1           	MOVWF	(_ep_bdt + 2), B
0019a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0019a6   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 3)
0019a8   6f03     movwf	0x3, 0x1           	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	149; ep0.c	EP_OUT_BD(0).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
0019aa   0e88     movlw	0x88               	MOVLW	0x88
0019ac   0104     movlb	0x4                	BANKSEL	_ep_bdt
0019ae   6f00     movwf	0, 0x1             	MOVWF	_ep_bdt, B
0019b0   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	150; ep0.c	EP_IN_BD(0).Stat.uc = BDS_UCPU;
0019b2   6b04     clrf	0x4, 0x1            	CLRF	(_ep_bdt + 4), B
                                           ;	.line	151; ep0.c	UEP0 = EPINEN_EN | EPOUTEN_EN | EPHSHK_EN;
0019b4   0e16     movlw	0x16               	MOVLW	0x16
0019b6   6e70     movwf	0x70, 0            	MOVWF	_UEP0
0019b8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0019ba   f001
0019bc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0019be   f000
0019c0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0019c2   ffd9
0019c4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep0__ep0_usb_std_request	code
                                           _ep0_usb_std_request:
                                           ;	.line	47; ep0.c	uchar ep0_usb_std_request(void)
0006b8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0006ba   ffe5
0006bc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0006be   ffd9
0006c0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0006c2   ffe5
0006c4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0006c6   ffe5
0006c8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0006ca   ffe5
0006cc   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
                                           ;	.line	52; ep0.c	unknown_request = FALSE;
0006ce   6ba4     clrf	0xa4, 0x1           	CLRF	_ep0_usb_std_request_unknown_request_1_1, B
0006d0   0105     movlb	0x5                	BANKSEL	_SetupBuffer
                                           ;	.line	54; ep0.c	if(SetupBuffer.request_type != STANDARD) 
0006d2   5100     movf	0, 0, 0x1           	MOVF	_SetupBuffer, W, B
0006d4   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0006d6   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0006d8   0b03     andlw	0x3                	ANDLW	0x03
0006da   6e00     movwf	0, 0               	MOVWF	r0x00
0006dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006de   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0006e0   ef75     goto	0x6ea               	GOTO	_00106_DS_
0006e2   f003
                                           ;	.line	56; ep0.c	return FALSE;
0006e4   6ae8     clrf	0xe8, 0             	CLRF	WREG
0006e6   efae     goto	0x95c               	GOTO	_00126_DS_
0006e8   f004
                                           _00106_DS_:
                                           ;	.line	59; ep0.c	switch(SetupBuffer.bRequest)
0006ea   ee05     lfsr	0, 0x501            	LFSR	0x00, (_SetupBuffer + 1)
0006ec   f001
0006ee   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0006f0   f000
0006f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006f4   e102     bnz	0x6fa                	BNZ	_00142_DS_
0006f6   efa6     goto	0x94c               	GOTO	_00125_DS_
0006f8   f004
                                           _00142_DS_:
0006fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006fc   0a01     xorlw	0x1                	XORLW	0x01
0006fe   e102     bnz	0x704                	BNZ	_00144_DS_
000700   efa6     goto	0x94c               	GOTO	_00125_DS_
000702   f004
                                           _00144_DS_:
000704   5000     movf	0, 0, 0             	MOVF	r0x00, W
000706   0a03     xorlw	0x3                	XORLW	0x03
000708   e102     bnz	0x70e                	BNZ	_00146_DS_
00070a   efa6     goto	0x94c               	GOTO	_00125_DS_
00070c   f004
                                           _00146_DS_:
00070e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000710   0a05     xorlw	0x5                	XORLW	0x05
000712   e102     bnz	0x718                	BNZ	_00148_DS_
000714   ef75     goto	0x8ea               	GOTO	_00117_DS_
000716   f004
                                           _00148_DS_:
000718   5000     movf	0, 0, 0             	MOVF	r0x00, W
00071a   0a06     xorlw	0x6                	XORLW	0x06
00071c   e102     bnz	0x722                	BNZ	_00150_DS_
00071e   efb7     goto	0x76e               	GOTO	_00109_DS_
000720   f003
                                           _00150_DS_:
000722   5000     movf	0, 0, 0             	MOVF	r0x00, W
000724   0a08     xorlw	0x8                	XORLW	0x08
000726   e102     bnz	0x72c                	BNZ	_00152_DS_
000728   efa7     goto	0x74e               	GOTO	_00108_DS_
00072a   f003
                                           _00152_DS_:
00072c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00072e   0a09     xorlw	0x9                	XORLW	0x09
000730   e102     bnz	0x736                	BNZ	_00154_DS_
000732   ef79     goto	0x8f2               	GOTO	_00118_DS_
000734   f004
                                           _00154_DS_:
000736   5000     movf	0, 0, 0             	MOVF	r0x00, W
000738   0a0a     xorlw	0xa                	XORLW	0x0a
00073a   e102     bnz	0x740                	BNZ	_00156_DS_
00073c   efa6     goto	0x94c               	GOTO	_00125_DS_
00073e   f004
                                           _00156_DS_:
000740   5000     movf	0, 0, 0             	MOVF	r0x00, W
000742   0a0b     xorlw	0xb                	XORLW	0x0b
000744   e102     bnz	0x74a                	BNZ	_00158_DS_
000746   efa6     goto	0x94c               	GOTO	_00125_DS_
000748   f004
                                           _00158_DS_:
00074a   efa3     goto	0x946               	GOTO	_00124_DS_
00074c   f004
                                           _00108_DS_:
                                           ;	.line	67; ep0.c	sourceData = &GET_ACTIVE_CONFIGURATION();
00074e   0e00     movlw	0                  	MOVLW	HIGH(_usb_active_cfg)
000750   0100     movlb	0                  	BANKSEL	(_sourceData + 1)
000752   6f79     movwf	0x79, 0x1          	MOVWF	(_sourceData + 1), B
000754   0e5e     movlw	0x5e               	MOVLW	LOW(_usb_active_cfg)
000756   0100     movlb	0                  	BANKSEL	_sourceData
000758   6f78     movwf	0x78, 0x1          	MOVWF	_sourceData, B
00075a   0e80     movlw	0x80               	MOVLW	0x80
00075c   0100     movlb	0                  	BANKSEL	(_sourceData + 2)
00075e   6f7a     movwf	0x7a, 0x1          	MOVWF	(_sourceData + 2), B
                                           ;	.line	68; ep0.c	num_bytes_to_be_send = 1;
000760   0e01     movlw	0x1                	MOVLW	0x01
000762   0100     movlb	0                  	BANKSEL	_num_bytes_to_be_send
000764   6f96     movwf	0x96, 0x1          	MOVWF	_num_bytes_to_be_send, B
000766   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
000768   6b97     clrf	0x97, 0x1           	CLRF	(_num_bytes_to_be_send + 1), B
                                           ;	.line	69; ep0.c	break;
00076a   efa6     goto	0x94c               	GOTO	_00125_DS_
00076c   f004
                                           _00109_DS_:
                                           ;	.line	72; ep0.c	switch(SetupBuffer.bDescType)
00076e   ee05     lfsr	0, 0x503            	LFSR	0x00, (_SetupBuffer + 3)
000770   f003
000772   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
000774   f000
000776   0e01     movlw	0x1                	MOVLW	0x01
000778   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
00077a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00077c   ef70     goto	0x8e0               	GOTO	_00113_DS_
00077e   f004
000780   0e04     movlw	0x4                	MOVLW	0x04
000782   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000784   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000786   ef70     goto	0x8e0               	GOTO	_00113_DS_
000788   f004
00078a   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00078c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00078e   ffe5
000790   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000792   ffe5
000794   6a04     clrf	0x4, 0              	CLRF	r0x04
000796   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000798   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
00079a   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00079c   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
00079e   0bfc     andlw	0xfc               	ANDLW	0xfc
0007a0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0007a2   0e00     movlw	0                  	MOVLW	UPPER(_00161_DS_)
0007a4   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0007a6   0e07     movlw	0x7                	MOVLW	HIGH(_00161_DS_)
0007a8   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0007aa   0ec2     movlw	0xc2               	MOVLW	LOW(_00161_DS_)
0007ac   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0007ae   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0007b0   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0007b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0007b4   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0007b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0007b8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0007ba   f004
0007bc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0007be   f003
0007c0   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00161_DS_:
0007c2   efe7     goto	0x7ce               	GOTO	_00110_DS_
0007c4   f003
0007c6   ef01     goto	0x802               	GOTO	_00111_DS_
0007c8   f004
0007ca   ef3b     goto	0x876               	GOTO	_00112_DS_
0007cc   f004
                                           _00110_DS_:
                                           ;	.line	77; ep0.c	sourceData = (uchar *) device_descriptor;
0007ce   c07e     movff	0x7e, 0x78         	MOVFF	_device_descriptor, _sourceData
0007d0   f078
0007d2   c07f     movff	0x7f, 0x79         	MOVFF	(_device_descriptor + 1), (_sourceData + 1)
0007d4   f079
0007d6   c080     movff	0x80, 0x7a         	MOVFF	(_device_descriptor + 2), (_sourceData + 2)
0007d8   f07a
                                           ;	.line	78; ep0.c	num_bytes_to_be_send = device_descriptor->bLength;
0007da   c07e     movff	0x7e, 0            	MOVFF	_device_descriptor, r0x00
0007dc   f000
0007de   c07f     movff	0x7f, 0x1          	MOVFF	(_device_descriptor + 1), r0x01
0007e0   f001
0007e2   c080     movff	0x80, 0x2          	MOVFF	(_device_descriptor + 2), r0x02
0007e4   f002
0007e6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0007e8   ffe9
0007ea   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0007ec   fff3
0007ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0007f0   ec70     call	0x1ae0, 0           	CALL	__gptrget1
0007f2   f00d
0007f4   6e00     movwf	0, 0               	MOVWF	r0x00
0007f6   c000     movff	0, 0x96            	MOVFF	r0x00, _num_bytes_to_be_send
0007f8   f096
0007fa   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
0007fc   6b97     clrf	0x97, 0x1           	CLRF	(_num_bytes_to_be_send + 1), B
                                           ;	.line	79; ep0.c	break;
0007fe   efa6     goto	0x94c               	GOTO	_00125_DS_
000800   f004
                                           _00111_DS_:
                                           ;	.line	82; ep0.c	sourceData = configuration_descriptor[SetupBuffer.bDescIndex];
000802   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
000804   f002
000806   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
000808   f000
                                           ; ;multiply lit val:0x03 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00080a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00080c   0d03     mullw	0x3                	MULLW	0x03
00080e   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000810   f000
000812   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
000814   f001
000816   0100     movlb	0                  	BANKSEL	_configuration_descriptor
000818   5181     movf	0x81, 0, 0x1        	MOVF	_configuration_descriptor, W, B
00081a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00081c   0100     movlb	0                  	BANKSEL	(_configuration_descriptor + 1)
00081e   5182     movf	0x82, 0, 0x1        	MOVF	(_configuration_descriptor + 1), W, B
000820   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000822   0100     movlb	0                  	BANKSEL	(_configuration_descriptor + 2)
000824   5183     movf	0x83, 0, 0x1        	MOVF	(_configuration_descriptor + 2), W, B
000826   6a02     clrf	0x2, 0              	CLRF	r0x02
000828   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00082a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00082c   ffe9
00082e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000830   fff3
000832   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000834   ec03     call	0x1a06, 0           	CALL	__gptrget3
000836   f00d
000838   0100     movlb	0                  	BANKSEL	_sourceData
00083a   6f78     movwf	0x78, 0x1          	MOVWF	_sourceData, B
00083c   cff3     movff	0xff3, 0x79        	MOVFF	PRODL, (_sourceData + 1)
00083e   f079
000840   cff4     movff	0xff4, 0x7a        	MOVFF	PRODH, (_sourceData + 2)
000842   f07a
                                           ;	.line	83; ep0.c	num_bytes_to_be_send = ((USB_Configuration_Descriptor*)sourceData)->wTotalLength;
000844   c078     movff	0x78, 0            	MOVFF	_sourceData, r0x00
000846   f000
000848   c079     movff	0x79, 0x1          	MOVFF	(_sourceData + 1), r0x01
00084a   f001
00084c   c07a     movff	0x7a, 0x2          	MOVFF	(_sourceData + 2), r0x02
00084e   f002
000850   0e02     movlw	0x2                	MOVLW	0x02
000852   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000854   0e00     movlw	0                  	MOVLW	0x00
000856   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000858   0e00     movlw	0                  	MOVLW	0x00
00085a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00085c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00085e   ffe9
000860   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000862   fff3
000864   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000866   ec34     call	0x1a68, 0           	CALL	__gptrget2
000868   f00d
00086a   0100     movlb	0                  	BANKSEL	_num_bytes_to_be_send
00086c   6f96     movwf	0x96, 0x1          	MOVWF	_num_bytes_to_be_send, B
00086e   cff3     movff	0xff3, 0x97        	MOVFF	PRODL, (_num_bytes_to_be_send + 1)
000870   f097
                                           ;	.line	84; ep0.c	break;
000872   efa6     goto	0x94c               	GOTO	_00125_DS_
000874   f004
                                           _00112_DS_:
                                           ;	.line	87; ep0.c	sourceData = string_descriptor[SetupBuffer.bDescIndex];
000876   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
000878   f002
00087a   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
00087c   f000
                                           ; ;multiply lit val:0x03 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00087e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000880   0d03     mullw	0x3                	MULLW	0x03
000882   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000884   f000
000886   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
000888   f001
00088a   0100     movlb	0                  	BANKSEL	_string_descriptor
00088c   5184     movf	0x84, 0, 0x1        	MOVF	_string_descriptor, W, B
00088e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000890   0100     movlb	0                  	BANKSEL	(_string_descriptor + 1)
000892   5185     movf	0x85, 0, 0x1        	MOVF	(_string_descriptor + 1), W, B
000894   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000896   0100     movlb	0                  	BANKSEL	(_string_descriptor + 2)
000898   5186     movf	0x86, 0, 0x1        	MOVF	(_string_descriptor + 2), W, B
00089a   6a02     clrf	0x2, 0              	CLRF	r0x02
00089c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00089e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0008a0   ffe9
0008a2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0008a4   fff3
0008a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008a8   ec03     call	0x1a06, 0           	CALL	__gptrget3
0008aa   f00d
0008ac   0100     movlb	0                  	BANKSEL	_sourceData
0008ae   6f78     movwf	0x78, 0x1          	MOVWF	_sourceData, B
0008b0   cff3     movff	0xff3, 0x79        	MOVFF	PRODL, (_sourceData + 1)
0008b2   f079
0008b4   cff4     movff	0xff4, 0x7a        	MOVFF	PRODH, (_sourceData + 2)
0008b6   f07a
                                           ;	.line	88; ep0.c	num_bytes_to_be_send = sourceData[0];
0008b8   c078     movff	0x78, 0            	MOVFF	_sourceData, r0x00
0008ba   f000
0008bc   c079     movff	0x79, 0x1          	MOVFF	(_sourceData + 1), r0x01
0008be   f001
0008c0   c07a     movff	0x7a, 0x2          	MOVFF	(_sourceData + 2), r0x02
0008c2   f002
0008c4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0008c6   ffe9
0008c8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0008ca   fff3
0008cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008ce   ec70     call	0x1ae0, 0           	CALL	__gptrget1
0008d0   f00d
0008d2   6e00     movwf	0, 0               	MOVWF	r0x00
0008d4   c000     movff	0, 0x96            	MOVFF	r0x00, _num_bytes_to_be_send
0008d6   f096
0008d8   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
0008da   6b97     clrf	0x97, 0x1           	CLRF	(_num_bytes_to_be_send + 1), B
                                           ;	.line	89; ep0.c	break;
0008dc   efa6     goto	0x94c               	GOTO	_00125_DS_
0008de   f004
                                           _00113_DS_:
                                           ;	.line	93; ep0.c	unknown_request = TRUE;
0008e0   0e01     movlw	0x1                	MOVLW	0x01
0008e2   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
0008e4   6fa4     movwf	0xa4, 0x1          	MOVWF	_ep0_usb_std_request_unknown_request_1_1, B
                                           ;	.line	96; ep0.c	break;
0008e6   efa6     goto	0x94c               	GOTO	_00125_DS_
0008e8   f004
                                           _00117_DS_:
                                           ;	.line	107; ep0.c	SET_DEVICE_STATE(ADDRESS_PENDING_STATE);
0008ea   0e04     movlw	0x4                	MOVLW	0x04
0008ec   6e5f     movwf	0x5f, 0            	MOVWF	_usb_device_state
                                           ;	.line	108; ep0.c	break;
0008ee   efa6     goto	0x94c               	GOTO	_00125_DS_
0008f0   f004
                                           _00118_DS_:
                                           ;	.line	112; ep0.c	if(device_descriptor->bNumConfigurations >= SetupBuffer.bConfigurationValue)
0008f2   c07e     movff	0x7e, 0            	MOVFF	_device_descriptor, r0x00
0008f4   f000
0008f6   c07f     movff	0x7f, 0x1          	MOVFF	(_device_descriptor + 1), r0x01
0008f8   f001
0008fa   c080     movff	0x80, 0x2          	MOVFF	(_device_descriptor + 2), r0x02
0008fc   f002
0008fe   0e11     movlw	0x11               	MOVLW	0x11
000900   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000902   0e00     movlw	0                  	MOVLW	0x00
000904   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000906   0e00     movlw	0                  	MOVLW	0x00
000908   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00090a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00090c   ffe9
00090e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000910   fff3
000912   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000914   ec70     call	0x1ae0, 0           	CALL	__gptrget1
000916   f00d
000918   6e00     movwf	0, 0               	MOVWF	r0x00
00091a   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
00091c   f002
00091e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000920   f001
000922   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000924   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000926   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000928   ef9e     goto	0x93c               	GOTO	_00120_DS_
00092a   f004
                                           ;	.line	114; ep0.c	coming_cfg = SetupBuffer.bConfigurationValue;
00092c   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
00092e   f002
000930   cfef     movff	0xfef, 0xa3        	MOVFF	INDF0, _coming_cfg
000932   f0a3
                                           ;	.line	115; ep0.c	SET_DEVICE_STATE(CONFIGURATION_PENDING_STATE);
000934   0e06     movlw	0x6                	MOVLW	0x06
000936   6e5f     movwf	0x5f, 0            	MOVWF	_usb_device_state
000938   efa6     goto	0x94c               	GOTO	_00125_DS_
00093a   f004
                                           _00120_DS_:
                                           ;	.line	121; ep0.c	unknown_request = TRUE;
00093c   0e01     movlw	0x1                	MOVLW	0x01
00093e   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
000940   6fa4     movwf	0xa4, 0x1          	MOVWF	_ep0_usb_std_request_unknown_request_1_1, B
                                           ;	.line	124; ep0.c	break;
000942   efa6     goto	0x94c               	GOTO	_00125_DS_
000944   f004
                                           _00124_DS_:
                                           ;	.line	137; ep0.c	unknown_request = TRUE;
000946   0e01     movlw	0x1                	MOVLW	0x01
000948   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
00094a   6fa4     movwf	0xa4, 0x1          	MOVWF	_ep0_usb_std_request_unknown_request_1_1, B
                                           _00125_DS_:
00094c   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
                                           ;	.line	140; ep0.c	return !unknown_request;
00094e   51a4     movf	0xa4, 0, 0x1        	MOVF	_ep0_usb_std_request_unknown_request_1_1, W, B
000950   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000952   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000954   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000956   6a00     clrf	0, 0                	CLRF	r0x00
000958   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00095a   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00126_DS_:
00095c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00095e   f002
000960   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000962   f001
000964   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000966   f000
000968   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00096a   ffd9
00096c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1836 (0x072c) bytes ( 1.40%)
                                           ;           	  918 (0x0396) words
                                           ; udata size:	   25 (0x0019) bytes ( 1.40%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:18 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ep1_init
                                           	global _ep1_out
                                           	global _ep1_OutBuffer
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _ep2_num_bytes_to_send
                                           	extern _ep2_source_data
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _prepare_ep2_in
                                           	extern _erase_block
                                           	extern _write_block
                                           	extern _delay10ktcy
                                           	extern __mulint
                                           	extern __mullong
                                           	extern _section_descriptor
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           
                                           usb_buf	udata
                                           _ep1_OutBuffer	res	64
                                           
                                           udata_ep1_0	udata
                                           iTemp0	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ep1__ep1_out	code
                                           _ep1_out:
                                           ;	.line	44; ep1.c	void ep1_out(void)
000c1a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c1c   ffe5
000c1e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c20   ffd9
000c22   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000c24   ffe5
000c26   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000c28   ffe5
000c2a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000c2c   ffe5
000c2e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000c30   ffe5
000c32   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000c34   ffe5
000c36   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000c38   ffe5
000c3a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000c3c   ffe5
000c3e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000c40   ffe5
                                           ;	.line	47; ep1.c	if(EP_OUT_BD(1).Cnt >= 1)
000c42   c409     movff	0x409, 0xa7        	MOVFF	(_ep_bdt + 9), (iTemp0 + 1)
000c44   f0a7
000c46   0e01     movlw	0x1                	MOVLW	0x01
000c48   0100     movlb	0                  	BANKSEL	(iTemp0 + 1)
000c4a   5da7     subwf	0xa7, 0, 0x1       	SUBWF	(iTemp0 + 1), W, B
000c4c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000c4e   ef00     goto	0xe00               	GOTO	_00124_DS_
000c50   f007
                                           ;	.line	49; ep1.c	switch(ep1_OutBuffer[0])
000c52   c510     movff	0x510, 0           	MOVFF	_ep1_OutBuffer, r0x00
000c54   f000
000c56   0e06     movlw	0x6                	MOVLW	0x06
000c58   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000c5a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c5c   efe3     goto	0xdc6               	GOTO	_00118_DS_
000c5e   f006
000c60   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000c62   ffe5
000c64   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000c66   ffe5
000c68   6a09     clrf	0x9, 0              	CLRF	r0x09
000c6a   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000c6c   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000c6e   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000c70   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000c72   0bfc     andlw	0xfc               	ANDLW	0xfc
000c74   6e08     movwf	0x8, 0             	MOVWF	r0x08
000c76   0e00     movlw	0                  	MOVLW	UPPER(_00133_DS_)
000c78   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000c7a   0e0c     movlw	0xc                	MOVLW	HIGH(_00133_DS_)
000c7c   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000c7e   0e96     movlw	0x96               	MOVLW	LOW(_00133_DS_)
000c80   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
000c82   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000c84   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000c86   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c88   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000c8a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000c8c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000c8e   f009
000c90   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000c92   f008
000c94   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00133_DS_:
000c96   ef57     goto	0xcae               	GOTO	_00109_DS_
000c98   f006
000c9a   ef61     goto	0xcc2               	GOTO	_00110_DS_
000c9c   f006
000c9e   ef71     goto	0xce2               	GOTO	_00111_DS_
000ca0   f006
000ca2   efc9     goto	0xd92               	GOTO	_00112_DS_
000ca4   f006
000ca6   efcb     goto	0xd96               	GOTO	_00113_DS_
000ca8   f006
000caa   efd1     goto	0xda2               	GOTO	_00117_DS_
000cac   f006
                                           _00109_DS_:
                                           ;	.line	53; ep1.c	TBLPTRL = ep1_OutBuffer[1];
000cae   c511     movff	0x511, 0xff6       	MOVFF	(_ep1_OutBuffer + 1), _TBLPTRL
000cb0   fff6
                                           ;	.line	54; ep1.c	TBLPTRH = ep1_OutBuffer[2];
000cb2   c512     movff	0x512, 0xff7       	MOVFF	(_ep1_OutBuffer + 2), _TBLPTRH
000cb4   fff7
                                           ;	.line	55; ep1.c	TBLPTRU = ep1_OutBuffer[3];
000cb6   c513     movff	0x513, 0xff8       	MOVFF	(_ep1_OutBuffer + 3), _TBLPTRU
000cb8   fff8
                                           ;	.line	56; ep1.c	erase_block();
000cba   ec5f     call	0x1abe, 0           	CALL	_erase_block
000cbc   f00d
                                           ;	.line	57; ep1.c	break;
000cbe   efef     goto	0xdde               	GOTO	_00119_DS_
000cc0   f006
                                           _00110_DS_:
                                           ;	.line	60; ep1.c	TBLPTRL = ep1_OutBuffer[1];
000cc2   c511     movff	0x511, 0xff6       	MOVFF	(_ep1_OutBuffer + 1), _TBLPTRL
000cc4   fff6
                                           ;	.line	61; ep1.c	TBLPTRH = ep1_OutBuffer[2];
000cc6   c512     movff	0x512, 0xff7       	MOVFF	(_ep1_OutBuffer + 2), _TBLPTRH
000cc8   fff7
                                           ;	.line	62; ep1.c	TBLPTRU = ep1_OutBuffer[3];
000cca   c513     movff	0x513, 0xff8       	MOVFF	(_ep1_OutBuffer + 3), _TBLPTRU
000ccc   fff8
                                           ;	.line	63; ep1.c	write_block((__data uchar *)&(ep1_OutBuffer[4]));
000cce   0e05     movlw	0x5                	MOVLW	HIGH(_ep1_OutBuffer + 4)
000cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd2   0e14     movlw	0x14               	MOVLW	LOW(_ep1_OutBuffer + 4)
000cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd6   ec89     call	0x1912, 0           	CALL	_write_block
000cd8   f00c
000cda   0e02     movlw	0x2                	MOVLW	0x02
000cdc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	64; ep1.c	break;
000cde   efef     goto	0xdde               	GOTO	_00119_DS_
000ce0   f006
                                           _00111_DS_:
                                           ;	.line	67; ep1.c	ep2_num_bytes_to_send = EP2_BUFFER_SIZE;
000ce2   0e40     movlw	0x40               	MOVLW	0x40
000ce4   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
000ce6   6f98     movwf	0x98, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
000ce8   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
000cea   6b99     clrf	0x99, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	69; ep1.c	ep2_source_data = (uchar __code *) (ep1_OutBuffer[1] + ep1_OutBuffer[2] * 256 + ep1_OutBuffer[3] * 65536);
000cec   c511     movff	0x511, 0           	MOVFF	(_ep1_OutBuffer + 1), r0x00
000cee   f000
000cf0   6a01     clrf	0x1, 0              	CLRF	r0x01
000cf2   c512     movff	0x512, 0x2         	MOVFF	(_ep1_OutBuffer + 2), r0x02
000cf4   f002
000cf6   6a03     clrf	0x3, 0              	CLRF	r0x03
000cf8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cfc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cfe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d00   0e01     movlw	0x1                	MOVLW	0x01
000d02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d04   0e00     movlw	0                  	MOVLW	0x00
000d06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d08   ecfa     call	0x17f4, 0           	CALL	__mulint
000d0a   f00b
000d0c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d0e   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000d10   f003
000d12   0e04     movlw	0x4                	MOVLW	0x04
000d14   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d16   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d18   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000d1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d1c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000d1e   c513     movff	0x513, 0x2         	MOVFF	(_ep1_OutBuffer + 3), r0x02
000d20   f002
000d22   6a03     clrf	0x3, 0              	CLRF	r0x03
000d24   6a04     clrf	0x4, 0              	CLRF	r0x04
000d26   6a05     clrf	0x5, 0              	CLRF	r0x05
000d28   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d2c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d30   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d34   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d38   0e00     movlw	0                  	MOVLW	0x00
000d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d3c   0e01     movlw	0x1                	MOVLW	0x01
000d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d40   0e00     movlw	0                  	MOVLW	0x00
000d42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d44   0e00     movlw	0                  	MOVLW	0x00
000d46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d48   ec1f     call	0xe3e, 0            	CALL	__mullong
000d4a   f007
000d4c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d4e   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
000d50   f003
000d52   cff4     movff	0xff4, 0x4         	MOVFF	PRODH, r0x04
000d54   f004
000d56   cfe9     movff	0xfe9, 0x5         	MOVFF	FSR0L, r0x05
000d58   f005
000d5a   0e08     movlw	0x8                	MOVLW	0x08
000d5c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000d5e   6ae8     clrf	0xe8, 0             	CLRF	WREG
000d60   be01     btfsc	0x1, 0x7, 0        	BTFSC	r0x01, 7
000d62   0eff     movlw	0xff               	MOVLW	0xff
000d64   6e06     movwf	0x6, 0             	MOVWF	r0x06
000d66   6e07     movwf	0x7, 0             	MOVWF	r0x07
000d68   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d6a   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
000d6c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d6e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000d70   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d72   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000d74   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000d76   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000d78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d7a   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
000d7c   6f7d     movwf	0x7d, 0x1          	MOVWF	(_ep2_source_data + 2), B
000d7e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d80   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
000d82   6f7c     movwf	0x7c, 0x1          	MOVWF	(_ep2_source_data + 1), B
000d84   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d86   0100     movlb	0                  	BANKSEL	_ep2_source_data
000d88   6f7b     movwf	0x7b, 0x1          	MOVWF	_ep2_source_data, B
                                           ;	.line	70; ep1.c	prepare_ep2_in();
000d8a   ec95     call	0x172a, 0           	CALL	_prepare_ep2_in
000d8c   f00b
                                           ;	.line	71; ep1.c	break;
000d8e   efef     goto	0xdde               	GOTO	_00119_DS_
000d90   f006
                                           _00112_DS_:
                                           ;	.line	74; ep1.c	break;
000d92   efef     goto	0xdde               	GOTO	_00119_DS_
000d94   f006
                                           _00113_DS_:
                                           ;	.line	77; ep1.c	delay10ktcy(10);
000d96   0e0a     movlw	0xa                	MOVLW	0x0a
000d98   ec30     call	0x660, 0            	CALL	_delay10ktcy
000d9a   f003
000d9c   00ff     reset                    	reset 
                                           ;	.line	79; ep1.c	break;
000d9e   efef     goto	0xdde               	GOTO	_00119_DS_
000da0   f006
                                           _00117_DS_:
                                           ;	.line	82; ep1.c	ep2_num_bytes_to_send = sizeof(section_descriptor);
000da2   0e16     movlw	0x16               	MOVLW	0x16
000da4   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
000da6   6f98     movwf	0x98, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
000da8   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
000daa   6b99     clrf	0x99, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	83; ep1.c	ep2_source_data = (uchar __code *) section_descriptor;
000dac   0efa     movlw	0xfa               	MOVLW	LOW(_section_descriptor)
000dae   0100     movlb	0                  	BANKSEL	_ep2_source_data
000db0   6f7b     movwf	0x7b, 0x1          	MOVWF	_ep2_source_data, B
000db2   0e03     movlw	0x3                	MOVLW	HIGH(_section_descriptor)
000db4   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
000db6   6f7c     movwf	0x7c, 0x1          	MOVWF	(_ep2_source_data + 1), B
000db8   0e00     movlw	0                  	MOVLW	UPPER(_section_descriptor)
000dba   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
000dbc   6f7d     movwf	0x7d, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	84; ep1.c	prepare_ep2_in();
000dbe   ec95     call	0x172a, 0           	CALL	_prepare_ep2_in
000dc0   f00b
                                           ;	.line	85; ep1.c	break;
000dc2   efef     goto	0xdde               	GOTO	_00119_DS_
000dc4   f006
                                           _00118_DS_:
                                           ;	.line	90; ep1.c	EP_OUT_BD(1).Cnt = EP1_BUFFER_SIZE;
000dc6   0e40     movlw	0x40               	MOVLW	0x40
000dc8   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 9)
000dca   6f09     movwf	0x9, 0x1           	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	91; ep1.c	EP_OUT_BD(1).ADR = (uchar __data *)&ep1_OutBuffer;
000dcc   0e10     movlw	0x10               	MOVLW	LOW(_ep1_OutBuffer)
000dce   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 10)
000dd0   6f0a     movwf	0xa, 0x1           	MOVWF	(_ep_bdt + 10), B
000dd2   0e05     movlw	0x5                	MOVLW	HIGH(_ep1_OutBuffer)
000dd4   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 11)
000dd6   6f0b     movwf	0xb, 0x1           	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	92; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_BSTALL;
000dd8   0e84     movlw	0x84               	MOVLW	0x84
000dda   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
000ddc   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
                                           _00119_DS_:
                                           ;	.line	95; ep1.c	EP_OUT_BD(1).Cnt = EP1_BUFFER_SIZE;
000dde   0e40     movlw	0x40               	MOVLW	0x40
000de0   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 9)
000de2   6f09     movwf	0x9, 0x1           	MOVWF	(_ep_bdt + 9), B
000de4   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
                                           ;	.line	96; ep1.c	if(EP_OUT_BD(1).Stat.DTS == 0)
000de6   bd08     btfsc	0x8, 0x6, 0x1      	BTFSC	(_ep_bdt + 8), 6, B
000de8   effb     goto	0xdf6               	GOTO	_00121_DS_
000dea   f006
                                           ;	.line	98; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
000dec   0ec8     movlw	0xc8               	MOVLW	0xc8
000dee   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
000df0   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
000df2   ef0c     goto	0xe18               	GOTO	_00126_DS_
000df4   f007
                                           _00121_DS_:
                                           ;	.line	102; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
000df6   0e88     movlw	0x88               	MOVLW	0x88
000df8   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
000dfa   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
000dfc   ef0c     goto	0xe18               	GOTO	_00126_DS_
000dfe   f007
                                           _00124_DS_:
                                           ;	.line	107; ep1.c	EP_OUT_BD(1).Cnt = EP1_BUFFER_SIZE;
000e00   0e40     movlw	0x40               	MOVLW	0x40
000e02   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 9)
000e04   6f09     movwf	0x9, 0x1           	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	108; ep1.c	EP_OUT_BD(1).ADR = (uchar __data *)&ep1_OutBuffer;
000e06   0e10     movlw	0x10               	MOVLW	LOW(_ep1_OutBuffer)
000e08   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 10)
000e0a   6f0a     movwf	0xa, 0x1           	MOVWF	(_ep_bdt + 10), B
000e0c   0e05     movlw	0x5                	MOVLW	HIGH(_ep1_OutBuffer)
000e0e   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 11)
000e10   6f0b     movwf	0xb, 0x1           	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	109; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_BSTALL;
000e12   0e84     movlw	0x84               	MOVLW	0x84
000e14   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
000e16   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
                                           _00126_DS_:
000e18   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000e1a   f007
000e1c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000e1e   f006
000e20   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000e22   f005
000e24   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000e26   f004
000e28   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000e2a   f003
000e2c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e2e   f002
000e30   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e32   f001
000e34   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e36   f000
000e38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e3a   ffd9
000e3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep1__ep1_init	code
                                           _ep1_init:
                                           ;	.line	35; ep1.c	void ep1_init(void)
001a94   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001a96   ffe5
001a98   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001a9a   ffd9
                                           ;	.line	38; ep1.c	EP_OUT_BD(1).Cnt = EP1_BUFFER_SIZE;
001a9c   0e40     movlw	0x40               	MOVLW	0x40
001a9e   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 9)
001aa0   6f09     movwf	0x9, 0x1           	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	39; ep1.c	EP_OUT_BD(1).ADR = (uchar __data *)&ep1_OutBuffer;
001aa2   0e10     movlw	0x10               	MOVLW	LOW(_ep1_OutBuffer)
001aa4   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 10)
001aa6   6f0a     movwf	0xa, 0x1           	MOVWF	(_ep_bdt + 10), B
001aa8   0e05     movlw	0x5                	MOVLW	HIGH(_ep1_OutBuffer)
001aaa   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 11)
001aac   6f0b     movwf	0xb, 0x1           	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	40; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
001aae   0e88     movlw	0x88               	MOVLW	0x88
001ab0   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
001ab2   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
                                           ;	.line	41; ep1.c	UEP1 = EPHSHK_EN | EPOUTEN_EN | EPCONDIS_EN;       // Init EP1 as an OUT EP
001ab4   0e1c     movlw	0x1c               	MOVLW	0x1c
001ab6   6e71     movwf	0x71, 0            	MOVWF	_UEP1
001ab8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001aba   ffd9
001abc   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  590 (0x024e) bytes ( 0.45%)
                                           ;           	  295 (0x0127) words
                                           ; udata size:	   65 (0x0041) bytes ( 3.63%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:19 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ep2_init
                                           	global _prepare_ep2_in
                                           	global _ep2_in
                                           	global _ep2_InBuffer
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _ep2_num_bytes_to_send
                                           	extern _ep2_source_data
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _fill_in_buffer
                                           	extern _section_descriptor
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           
                                           usb_buf	udata
                                           _ep2_InBuffer	res	64
                                           
                                           udata_ep2_0	udata
                                           _last_send_was_null	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ep2__ep2_in	code
                                           _ep2_in:
                                           ;	.line	61; ep2.c	void ep2_in(void)
001650   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001652   ffe5
001654   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001656   ffd9
001658   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00165a   ffe5
00165c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00165e   ffe5
001660   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001662   ffe5
001664   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001666   ffe5
001668   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00166a   ffe5
00166c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00166e   ffe5
001670   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
                                           ;	.line	64; ep2.c	if((ep2_num_bytes_to_send == 0) && last_send_was_null)
001672   5198     movf	0x98, 0, 0x1        	MOVF	_ep2_num_bytes_to_send, W, B
001674   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
001676   1199     iorwf	0x99, 0, 0x1       	IORWF	(_ep2_num_bytes_to_send + 1), W, B
001678   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
00167a   ef46     goto	0x168c              	GOTO	_00122_DS_
00167c   f00b
00167e   0100     movlb	0                  	BANKSEL	_last_send_was_null
001680   51a7     movf	0xa7, 0, 0x1        	MOVF	_last_send_was_null, W, B
001682   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001684   ef46     goto	0x168c              	GOTO	_00122_DS_
001686   f00b
                                           ;	.line	68; ep2.c	return;
001688   ef86     goto	0x170c              	GOTO	_00127_DS_
00168a   f00b
                                           _00122_DS_:
                                           ;	.line	70; ep2.c	last_send_was_null = (ep2_num_bytes_to_send < EP2_BUFFER_SIZE);
00168c   0e00     movlw	0                  	MOVLW	0x00
00168e   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
001690   5d99     subwf	0x99, 0, 0x1       	SUBWF	(_ep2_num_bytes_to_send + 1), W, B
001692   e103     bnz	0x169a               	BNZ	_00133_DS_
001694   0e40     movlw	0x40               	MOVLW	0x40
001696   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
001698   5d98     subwf	0x98, 0, 0x1       	SUBWF	_ep2_num_bytes_to_send, W, B
                                           _00133_DS_:
00169a   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
00169c   0100     movlb	0                  	BANKSEL	_last_send_was_null
00169e   6ba7     clrf	0xa7, 0x1           	CLRF	_last_send_was_null, B
0016a0   0100     movlb	0                  	BANKSEL	_last_send_was_null
0016a2   37a7     rlcf	0xa7, 0x1, 0x1      	RLCF	_last_send_was_null, F, B
0016a4   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
                                           ;	.line	71; ep2.c	EP_IN_BD(2).Cnt = ep2_num_bytes_to_send;
0016a6   5198     movf	0x98, 0, 0x1        	MOVF	_ep2_num_bytes_to_send, W, B
0016a8   6e00     movwf	0, 0               	MOVWF	r0x00
0016aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016ac   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 21)
0016ae   6f15     movwf	0x15, 0x1          	MOVWF	(_ep_bdt + 21), B
                                           ;	.line	72; ep2.c	fill_in_buffer(2, &ep2_source_data, EP2_BUFFER_SIZE, &ep2_num_bytes_to_send);
0016b0   0e00     movlw	0                  	MOVLW	HIGH(_ep2_source_data)
0016b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0016b4   0e7b     movlw	0x7b               	MOVLW	LOW(_ep2_source_data)
0016b6   6e00     movwf	0, 0               	MOVWF	r0x00
0016b8   0e80     movlw	0x80               	MOVLW	0x80
0016ba   6e02     movwf	0x2, 0             	MOVWF	r0x02
0016bc   0e00     movlw	0                  	MOVLW	HIGH(_ep2_num_bytes_to_send)
0016be   6e04     movwf	0x4, 0             	MOVWF	r0x04
0016c0   0e98     movlw	0x98               	MOVLW	LOW(_ep2_num_bytes_to_send)
0016c2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0016c4   0e80     movlw	0x80               	MOVLW	0x80
0016c6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0016c8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0016ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0016ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d4   0e00     movlw	0                  	MOVLW	0x00
0016d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016d8   0e40     movlw	0x40               	MOVLW	0x40
0016da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016dc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0016de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016e8   0e02     movlw	0x2                	MOVLW	0x02
0016ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016ec   ec29     call	0x1052, 0           	CALL	_fill_in_buffer
0016ee   f008
0016f0   0e09     movlw	0x9                	MOVLW	0x09
0016f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0016f4   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
                                           ;	.line	73; ep2.c	if(EP_IN_BD(2).Stat.DTS == 0)
0016f6   bd14     btfsc	0x14, 0x6, 0x1     	BTFSC	(_ep_bdt + 20), 6, B
0016f8   ef83     goto	0x1706              	GOTO	_00125_DS_
0016fa   f00b
                                           ;	.line	75; ep2.c	EP_IN_BD(2).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
0016fc   0ec8     movlw	0xc8               	MOVLW	0xc8
0016fe   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
001700   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
001702   ef86     goto	0x170c              	GOTO	_00127_DS_
001704   f00b
                                           _00125_DS_:
                                           ;	.line	79; ep2.c	EP_IN_BD(2).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
001706   0e88     movlw	0x88               	MOVLW	0x88
001708   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
00170a   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
                                           _00127_DS_:
00170c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00170e   f005
001710   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001712   f004
001714   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001716   f003
001718   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00171a   f002
00171c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00171e   f001
001720   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001722   f000
001724   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001726   ffd9
001728   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep2__prepare_ep2_in	code
                                           _prepare_ep2_in:
                                           ;	.line	44; ep2.c	void prepare_ep2_in(void)
00172a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00172c   ffe5
00172e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001730   ffd9
001732   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001734   ffe5
001736   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001738   ffe5
00173a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00173c   ffe5
00173e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001740   ffe5
001742   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001744   ffe5
001746   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001748   ffe5
                                           ;	.line	47; ep2.c	last_send_was_null = (ep2_num_bytes_to_send < EP2_BUFFER_SIZE);
00174a   0e00     movlw	0                  	MOVLW	0x00
00174c   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
00174e   5d99     subwf	0x99, 0, 0x1       	SUBWF	(_ep2_num_bytes_to_send + 1), W, B
001750   e103     bnz	0x1758               	BNZ	_00116_DS_
001752   0e40     movlw	0x40               	MOVLW	0x40
001754   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
001756   5d98     subwf	0x98, 0, 0x1       	SUBWF	_ep2_num_bytes_to_send, W, B
                                           _00116_DS_:
001758   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
00175a   0100     movlb	0                  	BANKSEL	_last_send_was_null
00175c   6ba7     clrf	0xa7, 0x1           	CLRF	_last_send_was_null, B
00175e   0100     movlb	0                  	BANKSEL	_last_send_was_null
001760   37a7     rlcf	0xa7, 0x1, 0x1      	RLCF	_last_send_was_null, F, B
001762   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
                                           ;	.line	48; ep2.c	EP_IN_BD(2).Cnt = ep2_num_bytes_to_send;
001764   5198     movf	0x98, 0, 0x1        	MOVF	_ep2_num_bytes_to_send, W, B
001766   6e00     movwf	0, 0               	MOVWF	r0x00
001768   5000     movf	0, 0, 0             	MOVF	r0x00, W
00176a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 21)
00176c   6f15     movwf	0x15, 0x1          	MOVWF	(_ep_bdt + 21), B
                                           ;	.line	49; ep2.c	EP_IN_BD(2).ADR = (uchar __data *)&ep2_InBuffer;
00176e   0e50     movlw	0x50               	MOVLW	LOW(_ep2_InBuffer)
001770   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 22)
001772   6f16     movwf	0x16, 0x1          	MOVWF	(_ep_bdt + 22), B
001774   0e05     movlw	0x5                	MOVLW	HIGH(_ep2_InBuffer)
001776   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 23)
001778   6f17     movwf	0x17, 0x1          	MOVWF	(_ep_bdt + 23), B
                                           ;	.line	50; ep2.c	fill_in_buffer(2, &ep2_source_data, EP2_BUFFER_SIZE, &ep2_num_bytes_to_send);
00177a   0e00     movlw	0                  	MOVLW	HIGH(_ep2_source_data)
00177c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00177e   0e7b     movlw	0x7b               	MOVLW	LOW(_ep2_source_data)
001780   6e00     movwf	0, 0               	MOVWF	r0x00
001782   0e80     movlw	0x80               	MOVLW	0x80
001784   6e02     movwf	0x2, 0             	MOVWF	r0x02
001786   0e00     movlw	0                  	MOVLW	HIGH(_ep2_num_bytes_to_send)
001788   6e04     movwf	0x4, 0             	MOVWF	r0x04
00178a   0e98     movlw	0x98               	MOVLW	LOW(_ep2_num_bytes_to_send)
00178c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00178e   0e80     movlw	0x80               	MOVLW	0x80
001790   6e05     movwf	0x5, 0             	MOVWF	r0x05
001792   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001796   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00179a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00179c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00179e   0e00     movlw	0                  	MOVLW	0x00
0017a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017a2   0e40     movlw	0x40               	MOVLW	0x40
0017a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b2   0e02     movlw	0x2                	MOVLW	0x02
0017b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b6   ec29     call	0x1052, 0           	CALL	_fill_in_buffer
0017b8   f008
0017ba   0e09     movlw	0x9                	MOVLW	0x09
0017bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0017be   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
                                           ;	.line	51; ep2.c	if(EP_IN_BD(2).Stat.DTS == 0)
0017c0   bd14     btfsc	0x14, 0x6, 0x1     	BTFSC	(_ep_bdt + 20), 6, B
0017c2   efe8     goto	0x17d0              	GOTO	_00110_DS_
0017c4   f00b
                                           ;	.line	53; ep2.c	EP_IN_BD(2).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
0017c6   0ec8     movlw	0xc8               	MOVLW	0xc8
0017c8   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
0017ca   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
0017cc   efeb     goto	0x17d6              	GOTO	_00112_DS_
0017ce   f00b
                                           _00110_DS_:
                                           ;	.line	57; ep2.c	EP_IN_BD(2).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
0017d0   0e88     movlw	0x88               	MOVLW	0x88
0017d2   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
0017d4   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
                                           _00112_DS_:
0017d6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0017d8   f005
0017da   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0017dc   f004
0017de   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0017e0   f003
0017e2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0017e4   f002
0017e6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0017e8   f001
0017ea   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0017ec   f000
0017ee   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0017f0   ffd9
0017f2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep2__ep2_init	code
                                           _ep2_init:
                                           ;	.line	34; ep2.c	void ep2_init(void)
001b38   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b3a   ffe5
001b3c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b3e   ffd9
                                           ;	.line	40; ep2.c	EP_IN_BD(2).Stat.uc = BDS_UCPU | BDS_DAT1 | BDS_DTSEN;
001b40   0e48     movlw	0x48               	MOVLW	0x48
001b42   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
001b44   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
                                           ;	.line	41; ep2.c	UEP2 = EPHSHK_EN | EPINEN_EN | EPCONDIS_EN;       // Init EP2 as an IN EP
001b46   0e1a     movlw	0x1a               	MOVLW	0x1a
001b48   6e72     movwf	0x72, 0            	MOVWF	_UEP2
001b4a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001b4c   ffd9
001b4e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  444 (0x01bc) bytes ( 0.34%)
                                           ;           	  222 (0x00de) words
                                           ; udata size:	   65 (0x0041) bytes ( 3.63%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:19 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ep2_source_data
                                           	global _ep2_num_bytes_to_send
                                           	global _write_block
                                           	global _erase_block
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _section_descriptor
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           
                                           udata_flash_0	udata
                                           _ep2_num_bytes_to_send	res	2
                                           
                                           udata_flash_1	udata
                                           _ep2_source_data	res	3
                                           
                                           udata_flash_2	udata
                                           _write_block_i_1_1	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_flash__erase_block	code
                                           _erase_block:
                                           ;	.line	78; flash.c	void erase_block()
001abe   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001ac0   ffe5
001ac2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001ac4   ffd9
001ac6   8ea6     bsf	0xa6, 0x7, 0         	bsf _EECON1, 7
001ac8   9ca6     bcf	0xa6, 0x6, 0         	bcf _EECON1, 6
001aca   84a6     bsf	0xa6, 0x2, 0         	bsf _EECON1, 2
001acc   88a6     bsf	0xa6, 0x4, 0         	bsf _EECON1, 4
001ace   9ef2     bcf	0xf2, 0x7, 0         	bcf _INTCON, 7
001ad0   0e55     movlw	0x55               	movlw 0x55
001ad2   6ea7     movwf	0xa7, 0            	movwf _EECON2
001ad4   0eaa     movlw	0xaa               	movlw 0xaa
001ad6   6ea7     movwf	0xa7, 0            	movwf _EECON2
001ad8   82a6     bsf	0xa6, 0x1, 0         	bsf _EECON1, 1
                                           	
001ada   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001adc   ffd9
001ade   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_flash__write_block	code
                                           _write_block:
                                           ;	.line	32; flash.c	void write_block(__data uchar *src)
001912   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001914   ffe5
001916   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001918   ffd9
00191a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00191c   ffe5
00191e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001920   ffe5
001922   0e02     movlw	0x2                	MOVLW	0x02
001924   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001926   f000
001928   0e03     movlw	0x3                	MOVLW	0x03
00192a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00192c   f001
00192e   000a     tblrd	*-                 	tblrd*-
                                           	
001930   0100     movlb	0                  	BANKSEL	_write_block_i_1_1
                                           ;	.line	43; flash.c	for(i = 0; i < 32; i++)
001932   6ba8     clrf	0xa8, 0x1           	CLRF	_write_block_i_1_1, B
                                           _00105_DS_:
001934   0e20     movlw	0x20               	MOVLW	0x20
001936   0100     movlb	0                  	BANKSEL	_write_block_i_1_1
001938   5da8     subwf	0xa8, 0, 0x1       	SUBWF	_write_block_i_1_1, W, B
00193a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00193c   efae     goto	0x195c              	GOTO	_00108_DS_
00193e   f00c
                                           ;	.line	45; flash.c	TABLAT = *src;
001940   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001942   ffe9
001944   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001946   ffea
001948   cfef     movff	0xfef, 0xff5       	MOVFF	INDF0, _TABLAT
00194a   fff5
                                           ;	.line	47; flash.c	src++;
00194c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00194e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001950   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001952   000f     tblwt	+*                 	tblwt+*
                                           	
001954   0100     movlb	0                  	BANKSEL	_write_block_i_1_1
                                           ;	.line	43; flash.c	for(i = 0; i < 32; i++)
001956   2ba8     incf	0xa8, 0x1, 0x1      	INCF	_write_block_i_1_1, F, B
001958   ef9a     goto	0x1934              	GOTO	_00105_DS_
00195a   f00c
                                           _00108_DS_:
00195c   8ea6     bsf	0xa6, 0x7, 0         	bsf _EECON1, 7
00195e   9ca6     bcf	0xa6, 0x6, 0         	bcf _EECON1, 6
001960   84a6     bsf	0xa6, 0x2, 0         	bsf _EECON1, 2
001962   9ef2     bcf	0xf2, 0x7, 0         	bcf _INTCON, 7
001964   0e55     movlw	0x55               	movlw 0x55
001966   6ea7     movwf	0xa7, 0            	movwf _EECON2
001968   0eaa     movlw	0xaa               	movlw 0xaa
00196a   6ea7     movwf	0xa7, 0            	movwf _EECON2
00196c   82a6     bsf	0xa6, 0x1, 0         	bsf _EECON1, 1
                                           	
00196e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001970   f001
001972   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001974   f000
001976   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001978   ffd9
00197a   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  148 (0x0094) bytes ( 0.11%)
                                           ;           	   74 (0x004a) words
                                           ; udata size:	    6 (0x0006) bytes ( 0.33%)
                                           ; access size:	    2 (0x0002) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:20 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _high_priority_isr
                                           	global _low_priority_isr
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_interrupt_iface__high_priority_isr	code	0X002020
                                           _high_priority_isr:
                                           ;	.line	28; interrupt_iface.c	void high_priority_isr(void) interrupt 1
002020   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
002022   ffe5
002024   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
002026   ffe5
002028   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00202a   ffe5
00202c   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00202e   ffe5
002030   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
002032   ffe5
002034   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
002036   ffe5
002038   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00203a   ffe5
00203c   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00203e   ffe5
002040   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
002042   ffe5
002044   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002046   ffe5
002048   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00204a   ffd9
                                           ;	.line	30; interrupt_iface.c	}
00204c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00204e   ffd9
002050   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
002052   fffb
002054   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
002056   fffa
002058   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00205a   ffea
00205c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00205e   ffe9
002060   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
002062   fff4
002064   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
002066   fff3
002068   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00206a   ffe0
00206c   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00206e   ffd8
002070   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
002072   ffe8
002074   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_interrupt_iface_ivec_0x1_high_priority_isr	code	0X000008
                                           ivec_0x1_high_priority_isr:
000008   ef10     goto	0x2020              	GOTO	_high_priority_isr
00000a   f010
                                           
                                           ; ; Starting pCode block
                                           S_interrupt_iface__low_priority_isr	code	0X004000
                                           _low_priority_isr:
                                           ;	.line	33; interrupt_iface.c	void low_priority_isr(void) interrupt 2
004000   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
004002   ffe5
004004   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
004006   ffe5
004008   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00400a   ffe5
00400c   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00400e   ffe5
004010   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
004012   ffe5
004014   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
004016   ffe5
004018   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00401a   ffe5
00401c   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00401e   ffe5
004020   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
004022   ffe5
004024   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004026   ffe5
004028   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00402a   ffd9
                                           ;	.line	35; interrupt_iface.c	}
00402c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00402e   ffd9
004030   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
004032   fffb
004034   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
004036   fffa
004038   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00403a   ffea
00403c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00403e   ffe9
004040   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
004042   fff4
004044   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
004046   fff3
004048   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00404a   ffe0
00404c   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00404e   ffd8
004050   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
004052   ffe8
004054   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_interrupt_iface_ivec_0x2_low_priority_isr	code	0X000018
                                           ivec_0x2_low_priority_isr:
000018   ef00     goto	0x4000              	GOTO	_low_priority_isr
00001a   f020
                                           
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  176 (0x00b0) bytes ( 0.13%)
                                           ;           	   88 (0x0058) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:21 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _string_descriptor
                                           	global _configuration_descriptor
                                           	global _device_descriptor
                                           	global _init_usb
                                           	global _reset_usb
                                           	global _usb_sleep
                                           	global _dispatch_usb_event
                                           	global _fill_in_buffer
                                           	global _ep_bdt
                                           	global _ep_init
                                           	global _ep_in
                                           	global _ep_out
                                           	global _ep_setup
                                           	global _usb_device_state
                                           	global _usb_active_cfg
                                           	global _usb_active_alt_setting
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget3
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrput3
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern __mulint
                                           	extern _section_descriptor
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           INTCON	equ	0xff2
                                           WREG	equ	0xfe8
                                           TOSL	equ	0xffd
                                           TOSH	equ	0xffe
                                           TOSU	equ	0xfff
                                           TBLPTRL	equ	0xff6
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           
                                           udata_usb_0	udata
                                           _device_descriptor	res	3
                                           
                                           udata_usb_1	udata
                                           _configuration_descriptor	res	3
                                           
                                           udata_usb_2	udata
                                           _string_descriptor	res	3
                                           
                                           udata_usb_3	udata
                                           _reset_usb_i_1_1	res	1
                                           
                                           udata_usb_4	udata
                                           _fill_in_buffer_byte_to_send_1_1	res	2
                                           
                                           udata_usb_5	udata
                                           _fill_in_buffer_dest_1_1	res	3
                                           
                                           udata_usb_6	udata
                                           _ep_init	res	3
                                           
                                           udata_usb_7	udata
                                           _ep_setup	res	3
                                           
                                           udata_usb_8	udata
                                           _ep_out	res	3
                                           
                                           udata_usb_9	udata
                                           _ep_in	res	3
                                           
                                           
                                           ustat_usb_00	udata	0X005D
                                           _usb_active_alt_setting	res	1
                                           _usb_active_cfg	res	1
                                           _usb_device_state	res	1
                                           
                                           
                                           ustat_usb_01	udata	0X0400
                                           _ep_bdt	res	128
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_usb__fill_in_buffer	code
                                           _fill_in_buffer:
                                           ;	.line	187; usb.c	void fill_in_buffer(uchar EPnum,
001052   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001054   ffe5
001056   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001058   ffd9
00105a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00105c   ffe5
00105e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001060   ffe5
001062   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001064   ffe5
001066   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001068   ffe5
00106a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00106c   ffe5
00106e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001070   ffe5
001072   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001074   ffe5
001076   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001078   ffe5
00107a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00107c   ffe5
00107e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001080   ffe5
001082   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001084   ffe5
001086   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001088   ffe5
00108a   0e02     movlw	0x2                	MOVLW	0x02
00108c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00108e   f000
001090   0e03     movlw	0x3                	MOVLW	0x03
001092   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001094   f001
001096   0e04     movlw	0x4                	MOVLW	0x04
001098   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00109a   f002
00109c   0e05     movlw	0x5                	MOVLW	0x05
00109e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0010a0   f003
0010a2   0e06     movlw	0x6                	MOVLW	0x06
0010a4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0010a6   f004
0010a8   0e07     movlw	0x7                	MOVLW	0x07
0010aa   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0010ac   f005
0010ae   0e08     movlw	0x8                	MOVLW	0x08
0010b0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0010b2   f006
0010b4   0e09     movlw	0x9                	MOVLW	0x09
0010b6   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0010b8   f007
0010ba   0e0a     movlw	0xa                	MOVLW	0x0a
0010bc   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
0010be   f008
                                           ;	.line	196; usb.c	if(*nb_byte < buffer_size)
0010c0   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0010c2   ffe9
0010c4   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0010c6   fff3
0010c8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0010ca   ec34     call	0x1a68, 0           	CALL	__gptrget2
0010cc   f00d
0010ce   6e09     movwf	0x9, 0             	MOVWF	r0x09
0010d0   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
0010d2   f00a
0010d4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0010d6   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0010d8   e102     bnz	0x10de               	BNZ	_00206_DS_
0010da   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010dc   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
                                           _00206_DS_:
0010de   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0010e0   ef78     goto	0x10f0              	GOTO	_00196_DS_
0010e2   f008
                                           ;	.line	198; usb.c	byte_to_send = *nb_byte;
0010e4   c009     movff	0x9, 0x9a          	MOVFF	r0x09, _fill_in_buffer_byte_to_send_1_1
0010e6   f09a
0010e8   c00a     movff	0xa, 0x9b          	MOVFF	r0x0a, (_fill_in_buffer_byte_to_send_1_1 + 1)
0010ea   f09b
0010ec   ef7c     goto	0x10f8              	GOTO	_00197_DS_
0010ee   f008
                                           _00196_DS_:
                                           ;	.line	202; usb.c	byte_to_send = buffer_size;
0010f0   c004     movff	0x4, 0x9a          	MOVFF	r0x04, _fill_in_buffer_byte_to_send_1_1
0010f2   f09a
0010f4   c005     movff	0x5, 0x9b          	MOVFF	r0x05, (_fill_in_buffer_byte_to_send_1_1 + 1)
0010f6   f09b
                                           _00197_DS_:
                                           ;	.line	205; usb.c	EP_IN_BD(EPnum).Cnt = byte_to_send;
0010f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010fa   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0010fc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0010fe   2804     incf	0x4, 0, 0           	INCF	r0x04, W
001100   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ; ;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001102   5000     movf	0, 0, 0             	MOVF	r0x00, W
001104   0d04     mullw	0x4                	MULLW	0x04
001106   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
001108   f000
00110a   0e00     movlw	0                  	MOVLW	LOW(_ep_bdt)
00110c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00110e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001110   6a05     clrf	0x5, 0              	CLRF	r0x05
001112   0e04     movlw	0x4                	MOVLW	HIGH(_ep_bdt)
001114   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001116   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
001118   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00111a   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00111c   0100     movlb	0                  	BANKSEL	_fill_in_buffer_byte_to_send_1_1
00111e   519a     movf	0x9a, 0, 0x1        	MOVF	_fill_in_buffer_byte_to_send_1_1, W, B
001120   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001122   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001124   ffe9
001126   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
001128   ffea
00112a   c00b     movff	0xb, 0xfef         	MOVFF	r0x0b, INDF0
00112c   ffef
                                           ;	.line	208; usb.c	dest = (uchar __data *) EP_IN_BD(EPnum).ADR;
00112e   0e00     movlw	0                  	MOVLW	LOW(_ep_bdt)
001130   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001132   0e04     movlw	0x4                	MOVLW	HIGH(_ep_bdt)
001134   6a04     clrf	0x4, 0              	CLRF	r0x04
001136   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001138   0e02     movlw	0x2                	MOVLW	0x02
00113a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00113c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00113e   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
001140   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001142   ffe9
001144   c004     movff	0x4, 0xfea         	MOVFF	r0x04, FSR0H
001146   ffea
001148   cfee     movff	0xfee, 0           	MOVFF	POSTINC0, r0x00
00114a   f000
00114c   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
00114e   f004
001150   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001152   0100     movlb	0                  	BANKSEL	(_fill_in_buffer_dest_1_1 + 1)
001154   6f88     movwf	0x88, 0x1          	MOVWF	(_fill_in_buffer_dest_1_1 + 1), B
001156   5000     movf	0, 0, 0             	MOVF	r0x00, W
001158   0100     movlb	0                  	BANKSEL	_fill_in_buffer_dest_1_1
00115a   6f87     movwf	0x87, 0x1          	MOVWF	_fill_in_buffer_dest_1_1, B
00115c   0e80     movlw	0x80               	MOVLW	0x80
00115e   0100     movlb	0                  	BANKSEL	(_fill_in_buffer_dest_1_1 + 2)
001160   6f89     movwf	0x89, 0x1          	MOVWF	(_fill_in_buffer_dest_1_1 + 2), B
001162   0100     movlb	0                  	BANKSEL	_fill_in_buffer_byte_to_send_1_1
                                           ;	.line	211; usb.c	*nb_byte -= byte_to_send;
001164   519a     movf	0x9a, 0, 0x1        	MOVF	_fill_in_buffer_byte_to_send_1_1, W, B
001166   5e09     subwf	0x9, 0x1, 0        	SUBWF	r0x09, F
001168   0100     movlb	0                  	BANKSEL	(_fill_in_buffer_byte_to_send_1_1 + 1)
00116a   519b     movf	0x9b, 0, 0x1        	MOVF	(_fill_in_buffer_byte_to_send_1_1 + 1), W, B
00116c   5a0a     subwfb	0xa, 0x1, 0       	SUBWFB	r0x0a, F
00116e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001170   ffe5
001172   c00a     movff	0xa, 0xff4         	MOVFF	r0x0a, PRODH
001174   fff4
001176   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001178   ffe9
00117a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00117c   fff3
00117e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001180   eca8     call	0x1b50, 0           	CALL	__gptrput2
001182   f00d
                                           _00198_DS_:
001184   0100     movlb	0                  	BANKSEL	_fill_in_buffer_byte_to_send_1_1
                                           ;	.line	214; usb.c	while(byte_to_send)
001186   519a     movf	0x9a, 0, 0x1        	MOVF	_fill_in_buffer_byte_to_send_1_1, W, B
001188   0100     movlb	0                  	BANKSEL	(_fill_in_buffer_byte_to_send_1_1 + 1)
00118a   119b     iorwf	0x9b, 0, 0x1       	IORWF	(_fill_in_buffer_byte_to_send_1_1 + 1), W, B
00118c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00118e   ef11     goto	0x1222              	GOTO	_00201_DS_
001190   f009
                                           ;	.line	216; usb.c	*dest = **source;
001192   c087     movff	0x87, 0            	MOVFF	_fill_in_buffer_dest_1_1, r0x00
001194   f000
001196   c088     movff	0x88, 0x4          	MOVFF	(_fill_in_buffer_dest_1_1 + 1), r0x04
001198   f004
00119a   c089     movff	0x89, 0x5          	MOVFF	(_fill_in_buffer_dest_1_1 + 2), r0x05
00119c   f005
00119e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0011a0   ffe9
0011a2   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
0011a4   fff3
0011a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011a8   ec03     call	0x1a06, 0           	CALL	__gptrget3
0011aa   f00d
0011ac   6e06     movwf	0x6, 0             	MOVWF	r0x06
0011ae   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0011b0   f007
0011b2   cff4     movff	0xff4, 0x8         	MOVFF	PRODH, r0x08
0011b4   f008
0011b6   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0011b8   ffe9
0011ba   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0011bc   fff3
0011be   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0011c0   ec70     call	0x1ae0, 0           	CALL	__gptrget1
0011c2   f00d
0011c4   6e09     movwf	0x9, 0             	MOVWF	r0x09
0011c6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0011c8   ffe5
0011ca   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0011cc   ffe9
0011ce   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0011d0   fff3
0011d2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0011d4   ecb4     call	0x1b68, 0           	CALL	__gptrput1
0011d6   f00d
0011d8   0100     movlb	0                  	BANKSEL	_fill_in_buffer_dest_1_1
                                           ;	.line	217; usb.c	dest++;
0011da   2b87     incf	0x87, 0x1, 0x1      	INCF	_fill_in_buffer_dest_1_1, F, B
0011dc   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0011de   d002     bra	0x11e4               	BRA	_10195_DS_
0011e0   0100     movlb	0                  	BANKSEL	(_fill_in_buffer_dest_1_1 + 1)
0011e2   2b88     incf	0x88, 0x1, 0x1      	INCF	(_fill_in_buffer_dest_1_1 + 1), F, B
                                           _10195_DS_:
0011e4   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0011e6   d002     bra	0x11ec               	BRA	_20196_DS_
0011e8   0100     movlb	0                  	BANKSEL	(_fill_in_buffer_dest_1_1 + 2)
0011ea   2b89     incf	0x89, 0x1, 0x1      	INCF	(_fill_in_buffer_dest_1_1 + 2), F, B
                                           _20196_DS_:
                                           ;	.line	218; usb.c	(*source)++;
0011ec   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0011ee   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011f0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0011f2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011f4   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
0011f6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0011f8   ffe5
0011fa   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
0011fc   fff4
0011fe   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
001200   fff6
001202   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001204   ffe9
001206   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001208   fff3
00120a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00120c   ec81     call	0x1b02, 0           	CALL	__gptrput3
00120e   f00d
                                           ;	.line	219; usb.c	byte_to_send--;
001210   0eff     movlw	0xff               	MOVLW	0xff
001212   0100     movlb	0                  	BANKSEL	_fill_in_buffer_byte_to_send_1_1
001214   279a     addwf	0x9a, 0x1, 0x1     	ADDWF	_fill_in_buffer_byte_to_send_1_1, F, B
001216   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001218   d002     bra	0x121e               	BRA	_30197_DS_
00121a   0100     movlb	0                  	BANKSEL	(_fill_in_buffer_byte_to_send_1_1 + 1)
00121c   079b     decf	0x9b, 0x1, 0x1      	DECF	(_fill_in_buffer_byte_to_send_1_1 + 1), F, B
                                           _30197_DS_:
00121e   efc2     goto	0x1184              	GOTO	_00198_DS_
001220   f008
                                           _00201_DS_:
001222   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001224   f00b
001226   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001228   f00a
00122a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00122c   f009
00122e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001230   f008
001232   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001234   f007
001236   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001238   f006
00123a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00123c   f005
00123e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001240   f004
001242   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001244   f003
001246   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001248   f002
00124a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00124c   f001
00124e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001250   f000
001252   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001254   ffd9
001256   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__dispatch_usb_event	code
                                           _dispatch_usb_event:
                                           ;	.line	117; usb.c	void dispatch_usb_event(void)
00007a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00007c   ffe5
00007e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000080   ffd9
000082   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000084   ffe5
000086   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000088   ffe5
00008a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00008c   ffe5
00008e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000090   ffe5
000092   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000094   ffe5
                                           ;	.line	120; usb.c	if(UIEbits.ACTVIE && UIRbits.ACTVIF)
000096   a469     btfss	0x69, 0x2, 0       	BTFSS	_UIEbits, 2
000098   ef54     goto	0xa8                	GOTO	_00138_DS_
00009a   f000
00009c   a468     btfss	0x68, 0x2, 0       	BTFSS	_UIRbits, 2
00009e   ef54     goto	0xa8                	GOTO	_00138_DS_
0000a0   f000
                                           ;	.line	122; usb.c	UCONbits.SUSPND = 0;
0000a2   926d     bcf	0x6d, 0x1, 0         	BCF	_UCONbits, 1
                                           ;	.line	123; usb.c	UIEbits.ACTVIE = 0;
0000a4   9469     bcf	0x69, 0x2, 0         	BCF	_UIEbits, 2
                                           ;	.line	124; usb.c	UIRbits.ACTVIF = 0;
0000a6   9468     bcf	0x68, 0x2, 0         	BCF	_UIRbits, 2
                                           _00138_DS_:
                                           ;	.line	128; usb.c	if(UIEbits.URSTIE && UIRbits.URSTIF)
0000a8   a069     btfss	0x69, 0, 0         	BTFSS	_UIEbits, 0
0000aa   ef5c     goto	0xb8                	GOTO	_00141_DS_
0000ac   f000
0000ae   a068     btfss	0x68, 0, 0         	BTFSS	_UIRbits, 0
0000b0   ef5c     goto	0xb8                	GOTO	_00141_DS_
0000b2   f000
                                           ;	.line	130; usb.c	reset_usb();
0000b4   eca1     call	0x1542, 0           	CALL	_reset_usb
0000b6   f00a
                                           _00141_DS_:
                                           ;	.line	134; usb.c	if(UIEbits.IDLEIE && UIRbits.IDLEIF)
0000b8   a869     btfss	0x69, 0x4, 0       	BTFSS	_UIEbits, 4
0000ba   ef65     goto	0xca                	GOTO	_00144_DS_
0000bc   f000
0000be   a868     btfss	0x68, 0x4, 0       	BTFSS	_UIRbits, 4
0000c0   ef65     goto	0xca                	GOTO	_00144_DS_
0000c2   f000
                                           ;	.line	137; usb.c	UIEbits.ACTVIE = 1;
0000c4   8469     bsf	0x69, 0x2, 0         	BSF	_UIEbits, 2
                                           ;	.line	138; usb.c	UIRbits.IDLEIF  = 0;
0000c6   9868     bcf	0x68, 0x4, 0         	BCF	_UIRbits, 4
                                           ;	.line	139; usb.c	UCONbits.SUSPND = 1;
0000c8   826d     bsf	0x6d, 0x1, 0         	BSF	_UCONbits, 1
                                           _00144_DS_:
                                           ;	.line	143; usb.c	if(UIEbits.STALLIE && UIRbits.STALLIF)
0000ca   aa69     btfss	0x69, 0x5, 0       	BTFSS	_UIEbits, 5
0000cc   efb1     goto	0x162               	GOTO	_00149_DS_
0000ce   f000
0000d0   aa68     btfss	0x68, 0x5, 0       	BTFSS	_UIRbits, 5
0000d2   efb1     goto	0x162               	GOTO	_00149_DS_
0000d4   f000
                                           ;	.line	148; usb.c	if(UEP0bits.EPSTALL == 1)
0000d6   6a00     clrf	0, 0                	CLRF	r0x00
0000d8   b070     btfsc	0x70, 0, 0         	BTFSC	_UEP0bits, 0
0000da   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0000dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000de   0a01     xorlw	0x1                	XORLW	0x01
0000e0   e102     bnz	0xe6                 	BNZ	_00180_DS_
0000e2   ef75     goto	0xea                	GOTO	_00181_DS_
0000e4   f000
                                           _00180_DS_:
0000e6   efb0     goto	0x160               	GOTO	_00147_DS_
0000e8   f000
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00181_DS_:
                                           ;	.line	150; usb.c	ep_init[GET_ACTIVE_CONFIGURATION()][0]();
0000ea   505e     movf	0x5e, 0, 0          	MOVF	_usb_active_cfg, W
0000ec   0d03     mullw	0x3                	MULLW	0x03
0000ee   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0000f0   f000
0000f2   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
0000f4   f001
0000f6   0100     movlb	0                  	BANKSEL	_ep_init
0000f8   518a     movf	0x8a, 0, 0x1        	MOVF	_ep_init, W, B
0000fa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0000fc   0100     movlb	0                  	BANKSEL	(_ep_init + 1)
0000fe   518b     movf	0x8b, 0, 0x1        	MOVF	(_ep_init + 1), W, B
000100   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000102   0100     movlb	0                  	BANKSEL	(_ep_init + 2)
000104   518c     movf	0x8c, 0, 0x1        	MOVF	(_ep_init + 2), W, B
000106   6a02     clrf	0x2, 0              	CLRF	r0x02
000108   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00010a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00010c   ffe9
00010e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000110   fff3
000112   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000114   ec03     call	0x1a06, 0           	CALL	__gptrget3
000116   f00d
000118   6e00     movwf	0, 0               	MOVWF	r0x00
00011a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00011c   f001
00011e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000120   f002
000122   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000124   ffe9
000126   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000128   fff3
00012a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00012c   ec03     call	0x1a06, 0           	CALL	__gptrget3
00012e   f00d
000130   6e00     movwf	0, 0               	MOVWF	r0x00
000132   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000134   f001
000136   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000138   f002
00013a   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
00013c   ffe5
00013e   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
000140   0005     push                     	PUSH	
000142   0e5e     movlw	0x5e               	MOVLW	LOW(_00182_DS_)
000144   6efd     movwf	0xfd, 0            	MOVWF	TOSL
000146   0e01     movlw	0x1                	MOVLW	HIGH(_00182_DS_)
000148   6efe     movwf	0xfe, 0            	MOVWF	TOSH
00014a   0e00     movlw	0                  	MOVLW	UPPER(_00182_DS_)
00014c   6eff     movwf	0xff, 0            	MOVWF	TOSU
00014e   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000150   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
000152   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
000154   fffb
000156   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
000158   fffa
00015a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00015c   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00182_DS_:
                                           ;	.line	151; usb.c	UEP0bits.EPSTALL = 0;
00015e   9070     bcf	0x70, 0, 0           	BCF	_UEP0bits, 0
                                           _00147_DS_:
                                           ;	.line	153; usb.c	UIRbits.STALLIF = 0;
000160   9a68     bcf	0x68, 0x5, 0         	BCF	_UIRbits, 5
                                           _00149_DS_:
                                           ;	.line	159; usb.c	if((GET_DEVICE_STATE() >= DEFAULT_STATE) &&
000162   0e03     movlw	0x3                	MOVLW	0x03
000164   5c5f     subwf	0x5f, 0, 0         	SUBWF	_usb_device_state, W
000166   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000168   eff0     goto	0x3e0               	GOTO	_00163_DS_
00016a   f001
                                           ;	.line	160; usb.c	UIEbits.TRNIE && UIRbits.TRNIF)
00016c   a669     btfss	0x69, 0x3, 0       	BTFSS	_UIEbits, 3
00016e   eff0     goto	0x3e0               	GOTO	_00163_DS_
000170   f001
000172   a668     btfss	0x68, 0x3, 0       	BTFSS	_UIRbits, 3
000174   eff0     goto	0x3e0               	GOTO	_00163_DS_
000176   f001
                                           ;	.line	163; usb.c	if(USTATbits.DIR == OUT)
000178   b46c     btfsc	0x6c, 0x2, 0       	BTFSC	_USTATbits, 2
00017a   ef90     goto	0x320               	GOTO	_00157_DS_
00017c   f001
                                           ;	.line	165; usb.c	if(EP_OUT_BD(USTATbits.ENDP).Stat.PID == SETUP_TOKEN)
00017e   506c     movf	0x6c, 0, 0          	MOVF	_USTATbits, W
000180   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
000182   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000184   0b0f     andlw	0xf                	ANDLW	0x0f
000186   6e00     movwf	0, 0               	MOVWF	r0x00
000188   5000     movf	0, 0, 0             	MOVF	r0x00, W
00018a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00018c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ; ;multiply lit val:0x04 by variable r0x01 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00018e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000190   0d04     mullw	0x4                	MULLW	0x04
000192   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000194   f000
000196   0e00     movlw	0                  	MOVLW	LOW(_ep_bdt)
000198   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00019a   0e04     movlw	0x4                	MOVLW	HIGH(_ep_bdt)
00019c   6a01     clrf	0x1, 0              	CLRF	r0x01
00019e   be00     btfsc	0, 0x7, 0          	BTFSC	r0x00, 7
0001a0   6801     setf	0x1, 0              	SETF	r0x01
0001a2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0001a4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001a6   ffe9
0001a8   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0001aa   ffea
0001ac   50ef     movf	0xef, 0, 0          	MOVF	INDF0, W
0001ae   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0001b0   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0001b2   0b0f     andlw	0xf                	ANDLW	0x0f
0001b4   6e00     movwf	0, 0               	MOVWF	r0x00
0001b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001b8   0a0d     xorlw	0xd                	XORLW	0x0d
0001ba   e102     bnz	0x1c0                	BNZ	_00184_DS_
0001bc   efe2     goto	0x1c4               	GOTO	_00185_DS_
0001be   f000
                                           _00184_DS_:
0001c0   ef39     goto	0x272               	GOTO	_00152_DS_
0001c2   f001
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00185_DS_:
                                           ;	.line	168; usb.c	ep_setup[GET_ACTIVE_CONFIGURATION()][USTATbits.ENDP]();
0001c4   505e     movf	0x5e, 0, 0          	MOVF	_usb_active_cfg, W
0001c6   0d03     mullw	0x3                	MULLW	0x03
0001c8   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0001ca   f000
0001cc   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
0001ce   f001
0001d0   0100     movlb	0                  	BANKSEL	_ep_setup
0001d2   518d     movf	0x8d, 0, 0x1        	MOVF	_ep_setup, W, B
0001d4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0001d6   0100     movlb	0                  	BANKSEL	(_ep_setup + 1)
0001d8   518e     movf	0x8e, 0, 0x1        	MOVF	(_ep_setup + 1), W, B
0001da   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0001dc   0100     movlb	0                  	BANKSEL	(_ep_setup + 2)
0001de   518f     movf	0x8f, 0, 0x1        	MOVF	(_ep_setup + 2), W, B
0001e0   6a02     clrf	0x2, 0              	CLRF	r0x02
0001e2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0001e4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001e6   ffe9
0001e8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001ea   fff3
0001ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ee   ec03     call	0x1a06, 0           	CALL	__gptrget3
0001f0   f00d
0001f2   6e00     movwf	0, 0               	MOVWF	r0x00
0001f4   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0001f6   f001
0001f8   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0001fa   f002
0001fc   506c     movf	0x6c, 0, 0          	MOVF	_USTATbits, W
0001fe   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
000200   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000202   0b0f     andlw	0xf                	ANDLW	0x0f
000204   6e03     movwf	0x3, 0             	MOVWF	r0x03
000206   6a04     clrf	0x4, 0              	CLRF	r0x04
000208   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00020a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00020c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00020e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000210   0e00     movlw	0                  	MOVLW	0x00
000212   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000214   0e03     movlw	0x3                	MOVLW	0x03
000216   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000218   ecfa     call	0x17f4, 0           	CALL	__mulint
00021a   f00b
00021c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00021e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000220   f004
000222   0e04     movlw	0x4                	MOVLW	0x04
000224   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000226   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000228   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00022a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00022c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00022e   6ae8     clrf	0xe8, 0             	CLRF	WREG
000230   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000232   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000234   ffe9
000236   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000238   fff3
00023a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00023c   ec03     call	0x1a06, 0           	CALL	__gptrget3
00023e   f00d
000240   6e00     movwf	0, 0               	MOVWF	r0x00
000242   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000244   f001
000246   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000248   f002
00024a   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
00024c   ffe5
00024e   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
000250   0005     push                     	PUSH	
000252   0e6e     movlw	0x6e               	MOVLW	LOW(_00186_DS_)
000254   6efd     movwf	0xfd, 0            	MOVWF	TOSL
000256   0e02     movlw	0x2                	MOVLW	HIGH(_00186_DS_)
000258   6efe     movwf	0xfe, 0            	MOVWF	TOSH
00025a   0e00     movlw	0                  	MOVLW	UPPER(_00186_DS_)
00025c   6eff     movwf	0xff, 0            	MOVWF	TOSU
00025e   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000260   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
000262   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
000264   fffb
000266   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
000268   fffa
00026a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00026c   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00186_DS_:
00026e   efef     goto	0x3de               	GOTO	_00158_DS_
000270   f001
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00152_DS_:
                                           ;	.line	173; usb.c	ep_out[GET_ACTIVE_CONFIGURATION()][USTATbits.ENDP]();
000272   505e     movf	0x5e, 0, 0          	MOVF	_usb_active_cfg, W
000274   0d03     mullw	0x3                	MULLW	0x03
000276   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000278   f000
00027a   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
00027c   f001
00027e   0100     movlb	0                  	BANKSEL	_ep_out
000280   5190     movf	0x90, 0, 0x1        	MOVF	_ep_out, W, B
000282   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000284   0100     movlb	0                  	BANKSEL	(_ep_out + 1)
000286   5191     movf	0x91, 0, 0x1        	MOVF	(_ep_out + 1), W, B
000288   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00028a   0100     movlb	0                  	BANKSEL	(_ep_out + 2)
00028c   5192     movf	0x92, 0, 0x1        	MOVF	(_ep_out + 2), W, B
00028e   6a02     clrf	0x2, 0              	CLRF	r0x02
000290   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000292   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000294   ffe9
000296   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000298   fff3
00029a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00029c   ec03     call	0x1a06, 0           	CALL	__gptrget3
00029e   f00d
0002a0   6e00     movwf	0, 0               	MOVWF	r0x00
0002a2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0002a4   f001
0002a6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0002a8   f002
0002aa   506c     movf	0x6c, 0, 0          	MOVF	_USTATbits, W
0002ac   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0002ae   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0002b0   0b0f     andlw	0xf                	ANDLW	0x0f
0002b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002b4   6a04     clrf	0x4, 0              	CLRF	r0x04
0002b6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ba   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002be   0e00     movlw	0                  	MOVLW	0x00
0002c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002c2   0e03     movlw	0x3                	MOVLW	0x03
0002c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002c6   ecfa     call	0x17f4, 0           	CALL	__mulint
0002c8   f00b
0002ca   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002cc   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0002ce   f004
0002d0   0e04     movlw	0x4                	MOVLW	0x04
0002d2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002d6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0002d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002da   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0002dc   6ae8     clrf	0xe8, 0             	CLRF	WREG
0002de   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0002e0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0002e2   ffe9
0002e4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0002e6   fff3
0002e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002ea   ec03     call	0x1a06, 0           	CALL	__gptrget3
0002ec   f00d
0002ee   6e00     movwf	0, 0               	MOVWF	r0x00
0002f0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0002f2   f001
0002f4   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0002f6   f002
0002f8   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
0002fa   ffe5
0002fc   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
0002fe   0005     push                     	PUSH	
000300   0e1c     movlw	0x1c               	MOVLW	LOW(_00187_DS_)
000302   6efd     movwf	0xfd, 0            	MOVWF	TOSL
000304   0e03     movlw	0x3                	MOVLW	HIGH(_00187_DS_)
000306   6efe     movwf	0xfe, 0            	MOVWF	TOSH
000308   0e00     movlw	0                  	MOVLW	UPPER(_00187_DS_)
00030a   6eff     movwf	0xff, 0            	MOVWF	TOSU
00030c   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
00030e   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
000310   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
000312   fffb
000314   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
000316   fffa
000318   5000     movf	0, 0, 0             	MOVF	r0x00, W
00031a   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00187_DS_:
00031c   efef     goto	0x3de               	GOTO	_00158_DS_
00031e   f001
                                           _00157_DS_:
                                           ;	.line	176; usb.c	else if(USTATbits.DIR == IN)
000320   6a00     clrf	0, 0                	CLRF	r0x00
000322   b46c     btfsc	0x6c, 0x2, 0       	BTFSC	_USTATbits, 2
000324   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000326   5000     movf	0, 0, 0             	MOVF	r0x00, W
000328   0a01     xorlw	0x1                	XORLW	0x01
00032a   e102     bnz	0x330                	BNZ	_00188_DS_
00032c   ef9a     goto	0x334               	GOTO	_00189_DS_
00032e   f001
                                           _00188_DS_:
000330   efef     goto	0x3de               	GOTO	_00158_DS_
000332   f001
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00189_DS_:
                                           ;	.line	179; usb.c	ep_in[GET_ACTIVE_CONFIGURATION()][USTATbits.ENDP]();
000334   505e     movf	0x5e, 0, 0          	MOVF	_usb_active_cfg, W
000336   0d03     mullw	0x3                	MULLW	0x03
000338   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00033a   f000
00033c   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
00033e   f001
000340   0100     movlb	0                  	BANKSEL	_ep_in
000342   5193     movf	0x93, 0, 0x1        	MOVF	_ep_in, W, B
000344   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000346   0100     movlb	0                  	BANKSEL	(_ep_in + 1)
000348   5194     movf	0x94, 0, 0x1        	MOVF	(_ep_in + 1), W, B
00034a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00034c   0100     movlb	0                  	BANKSEL	(_ep_in + 2)
00034e   5195     movf	0x95, 0, 0x1        	MOVF	(_ep_in + 2), W, B
000350   6a02     clrf	0x2, 0              	CLRF	r0x02
000352   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000354   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000356   ffe9
000358   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00035a   fff3
00035c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00035e   ec03     call	0x1a06, 0           	CALL	__gptrget3
000360   f00d
000362   6e00     movwf	0, 0               	MOVWF	r0x00
000364   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000366   f001
000368   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00036a   f002
00036c   506c     movf	0x6c, 0, 0          	MOVF	_USTATbits, W
00036e   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
000370   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000372   0b0f     andlw	0xf                	ANDLW	0x0f
000374   6e03     movwf	0x3, 0             	MOVWF	r0x03
000376   6a04     clrf	0x4, 0              	CLRF	r0x04
000378   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00037a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00037c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00037e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000380   0e00     movlw	0                  	MOVLW	0x00
000382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000384   0e03     movlw	0x3                	MOVLW	0x03
000386   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000388   ecfa     call	0x17f4, 0           	CALL	__mulint
00038a   f00b
00038c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00038e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000390   f004
000392   0e04     movlw	0x4                	MOVLW	0x04
000394   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000396   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000398   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00039a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00039c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00039e   6ae8     clrf	0xe8, 0             	CLRF	WREG
0003a0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0003a2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0003a4   ffe9
0003a6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0003a8   fff3
0003aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0003ac   ec03     call	0x1a06, 0           	CALL	__gptrget3
0003ae   f00d
0003b0   6e00     movwf	0, 0               	MOVWF	r0x00
0003b2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0003b4   f001
0003b6   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0003b8   f002
0003ba   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
0003bc   ffe5
0003be   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
0003c0   0005     push                     	PUSH	
0003c2   0ede     movlw	0xde               	MOVLW	LOW(_00190_DS_)
0003c4   6efd     movwf	0xfd, 0            	MOVWF	TOSL
0003c6   0e03     movlw	0x3                	MOVLW	HIGH(_00190_DS_)
0003c8   6efe     movwf	0xfe, 0            	MOVWF	TOSH
0003ca   0e00     movlw	0                  	MOVLW	UPPER(_00190_DS_)
0003cc   6eff     movwf	0xff, 0            	MOVWF	TOSU
0003ce   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
0003d0   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
0003d2   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
0003d4   fffb
0003d6   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
0003d8   fffa
0003da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003dc   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00190_DS_:
                                           _00158_DS_:
                                           ;	.line	183; usb.c	UIRbits.TRNIF = 0;
0003de   9668     bcf	0x68, 0x3, 0         	BCF	_UIRbits, 3
                                           _00163_DS_:
0003e0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0003e2   f004
0003e4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0003e6   f003
0003e8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0003ea   f002
0003ec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0003ee   f001
0003f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0003f2   f000
0003f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0003f6   ffd9
0003f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__usb_sleep	code
                                           _usb_sleep:
                                           ;	.line	100; usb.c	void usb_sleep(void)
001b1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b20   ffe5
001b22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b24   ffd9
                                           ;	.line	104; usb.c	if(UCONbits.SUSPND)
001b26   a26d     btfss	0x6d, 0x1, 0       	BTFSS	_UCONbits, 1
001b28   ef99     goto	0x1b32              	GOTO	_00132_DS_
001b2a   f00d
                                           ;	.line	111; usb.c	PIE2bits.USBIE = 1; 
001b2c   8aa0     bsf	0xa0, 0x5, 0         	BSF	_PIE2bits, 5
001b2e   0003     sleep                    	sleep 
                                           ;	.line	113; usb.c	PIR2bits.USBIF = 0;
001b30   9aa1     bcf	0xa1, 0x5, 0         	BCF	_PIR2bits, 5
                                           _00132_DS_:
001b32   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001b34   ffd9
001b36   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__reset_usb	code
                                           _reset_usb:
                                           ;	.line	65; usb.c	void reset_usb(void)
001542   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001544   ffe5
001546   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001548   ffd9
00154a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00154c   ffe5
00154e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001550   ffe5
001552   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001554   ffe5
001556   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001558   ffe5
00155a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00155c   ffe5
                                           ;	.line	70; usb.c	UIR = 0;
00155e   6a68     clrf	0x68, 0             	CLRF	_UIR
                                           ;	.line	71; usb.c	UIE = 0x7b;
001560   0e7b     movlw	0x7b               	MOVLW	0x7b
001562   6e69     movwf	0x69, 0            	MOVWF	_UIE
                                           ;	.line	72; usb.c	UEIE = 0;
001564   6a6b     clrf	0x6b, 0             	CLRF	_UEIE
                                           ;	.line	73; usb.c	UADDR = 0x00;
001566   6a6e     clrf	0x6e, 0             	CLRF	_UADDR
                                           _00110_DS_:
                                           ;	.line	75; usb.c	while(UIRbits.TRNIF)
001568   a668     btfss	0x68, 0x3, 0       	BTFSS	_UIRbits, 3
00156a   efba     goto	0x1574              	GOTO	_00112_DS_
00156c   f00a
                                           ;	.line	77; usb.c	UIRbits.TRNIF = 0;
00156e   9668     bcf	0x68, 0x3, 0         	BCF	_UIRbits, 3
001570   efb4     goto	0x1568              	GOTO	_00110_DS_
001572   f00a
                                           _00112_DS_:
                                           ;	.line	81; usb.c	SET_DEVICE_STATE(DEFAULT_STATE);
001574   0e03     movlw	0x3                	MOVLW	0x03
001576   6e5f     movwf	0x5f, 0            	MOVWF	_usb_device_state
                                           ;	.line	84; usb.c	SET_ACTIVE_CONFIGURATION(0);
001578   6a5e     clrf	0x5e, 0             	CLRF	_usb_active_cfg
                                           ;	.line	85; usb.c	SET_ACTIVE_ALTERNATE_SETTING(0);
00157a   6a5d     clrf	0x5d, 0             	CLRF	_usb_active_alt_setting
                                           ;	.line	87; usb.c	UEP0  = 0; UEP1  = 0; UEP2  = 0; UEP3  = 0;
00157c   6a70     clrf	0x70, 0             	CLRF	_UEP0
00157e   6a71     clrf	0x71, 0             	CLRF	_UEP1
001580   6a72     clrf	0x72, 0             	CLRF	_UEP2
001582   6a73     clrf	0x73, 0             	CLRF	_UEP3
                                           ;	.line	88; usb.c	UEP4  = 0; UEP5  = 0; UEP6  = 0; UEP7  = 0;
001584   6a74     clrf	0x74, 0             	CLRF	_UEP4
001586   6a75     clrf	0x75, 0             	CLRF	_UEP5
001588   6a76     clrf	0x76, 0             	CLRF	_UEP6
00158a   6a77     clrf	0x77, 0             	CLRF	_UEP7
                                           ;	.line	89; usb.c	UEP8  = 0; UEP9  = 0; UEP10 = 0; UEP11 = 0;
00158c   6a78     clrf	0x78, 0             	CLRF	_UEP8
00158e   6a79     clrf	0x79, 0             	CLRF	_UEP9
001590   6a7a     clrf	0x7a, 0             	CLRF	_UEP10
001592   6a7b     clrf	0x7b, 0             	CLRF	_UEP11
                                           ;	.line	90; usb.c	UEP12 = 0; UEP13 = 0; UEP14 = 0; UEP15 = 0;
001594   6a7c     clrf	0x7c, 0             	CLRF	_UEP12
001596   6a7d     clrf	0x7d, 0             	CLRF	_UEP13
001598   6a7e     clrf	0x7e, 0             	CLRF	_UEP14
00159a   6a7f     clrf	0x7f, 0             	CLRF	_UEP15
                                           ;	.line	92; usb.c	UCONbits.PKTDIS = 0;
00159c   986d     bcf	0x6d, 0x4, 0         	BCF	_UCONbits, 4
                                           ;	.line	94; usb.c	for(i = 0; i < 16; i++)
00159e   0e10     movlw	0x10               	MOVLW	0x10
0015a0   0100     movlb	0                  	BANKSEL	_reset_usb_i_1_1
0015a2   6fa9     movwf	0xa9, 0x1          	MOVWF	_reset_usb_i_1_1, B
                                           _00115_DS_:
                                           ;	.line	96; usb.c	ep_init[0][i]();
0015a4   c08a     movff	0x8a, 0            	MOVFF	_ep_init, r0x00
0015a6   f000
0015a8   c08b     movff	0x8b, 0x1          	MOVFF	(_ep_init + 1), r0x01
0015aa   f001
0015ac   c08c     movff	0x8c, 0x2          	MOVFF	(_ep_init + 2), r0x02
0015ae   f002
0015b0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0015b2   ffe9
0015b4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0015b6   fff3
0015b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015ba   ec03     call	0x1a06, 0           	CALL	__gptrget3
0015bc   f00d
0015be   6e00     movwf	0, 0               	MOVWF	r0x00
0015c0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0015c2   f001
0015c4   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0015c6   f002
0015c8   0100     movlb	0                  	BANKSEL	_reset_usb_i_1_1
0015ca   05a9     decf	0xa9, 0, 0x1        	DECF	_reset_usb_i_1_1, W, B
0015cc   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ; ;multiply lit val:0x03 by variable r0x03 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0015ce   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0015d0   0d03     mullw	0x3                	MULLW	0x03
0015d2   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0015d4   f003
0015d6   cff4     movff	0xff4, 0x4         	MOVFF	PRODH, r0x04
0015d8   f004
0015da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0015dc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0015de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0015e0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0015e2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0015e4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0015e6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0015e8   ffe9
0015ea   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0015ec   fff3
0015ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015f0   ec03     call	0x1a06, 0           	CALL	__gptrget3
0015f2   f00d
0015f4   6e00     movwf	0, 0               	MOVWF	r0x00
0015f6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0015f8   f001
0015fa   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0015fc   f002
0015fe   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
001600   ffe5
001602   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
001604   0005     push                     	PUSH	
001606   0e22     movlw	0x22               	MOVLW	LOW(_00122_DS_)
001608   6efd     movwf	0xfd, 0            	MOVWF	TOSL
00160a   0e16     movlw	0x16               	MOVLW	HIGH(_00122_DS_)
00160c   6efe     movwf	0xfe, 0            	MOVWF	TOSH
00160e   0e00     movlw	0                  	MOVLW	UPPER(_00122_DS_)
001610   6eff     movwf	0xff, 0            	MOVWF	TOSU
001612   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
001614   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
001616   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
001618   fffb
00161a   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
00161c   fffa
00161e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001620   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00122_DS_:
001622   0100     movlb	0                  	BANKSEL	_reset_usb_i_1_1
001624   07a9     decf	0xa9, 0x1, 0x1      	DECF	_reset_usb_i_1_1, F, B
001626   0100     movlb	0                  	BANKSEL	_reset_usb_i_1_1
                                           ;	.line	94; usb.c	for(i = 0; i < 16; i++)
001628   51a9     movf	0xa9, 0, 0x1        	MOVF	_reset_usb_i_1_1, W, B
00162a   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
00162c   efd2     goto	0x15a4              	GOTO	_00115_DS_
00162e   f00a
001630   0e10     movlw	0x10               	MOVLW	0x10
001632   0100     movlb	0                  	BANKSEL	_reset_usb_i_1_1
001634   6fa9     movwf	0xa9, 0x1          	MOVWF	_reset_usb_i_1_1, B
001636   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001638   f004
00163a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00163c   f003
00163e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001640   f002
001642   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001644   f001
001646   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001648   f000
00164a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00164c   ffd9
00164e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__init_usb	code
                                           _init_usb:
                                           ;	.line	48; usb.c	void init_usb(void)
001a3c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001a3e   ffe5
001a40   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001a42   ffd9
                                           ;	.line	50; usb.c	UIE  = 0;
001a44   6a69     clrf	0x69, 0             	CLRF	_UIE
                                           ;	.line	51; usb.c	UCFG = 0x14;
001a46   0e14     movlw	0x14               	MOVLW	0x14
001a48   6e6f     movwf	0x6f, 0            	MOVWF	_UCFG
                                           ;	.line	52; usb.c	UCON = 0x08;
001a4a   0e08     movlw	0x8                	MOVLW	0x08
001a4c   6e6d     movwf	0x6d, 0            	MOVWF	_UCON
                                           _00105_DS_:
                                           ;	.line	53; usb.c	while(UCONbits.SE0);
001a4e   ba6d     btfsc	0x6d, 0x5, 0       	BTFSC	_UCONbits, 5
001a50   ef27     goto	0x1a4e              	GOTO	_00105_DS_
001a52   f00d
                                           ;	.line	54; usb.c	UIR  = 0;
001a54   6a68     clrf	0x68, 0             	CLRF	_UIR
                                           ;	.line	55; usb.c	UIE  = 0x11;
001a56   0e11     movlw	0x11               	MOVLW	0x11
001a58   6e69     movwf	0x69, 0            	MOVWF	_UIE
                                           ;	.line	58; usb.c	SET_DEVICE_STATE(POWERED_STATE);
001a5a   0e02     movlw	0x2                	MOVLW	0x02
001a5c   6e5f     movwf	0x5f, 0            	MOVWF	_usb_device_state
                                           ;	.line	61; usb.c	SET_ACTIVE_CONFIGURATION(0);
001a5e   6a5e     clrf	0x5e, 0             	CLRF	_usb_active_cfg
                                           ;	.line	62; usb.c	SET_ACTIVE_ALTERNATE_SETTING(0);
001a60   6a5d     clrf	0x5d, 0             	CLRF	_usb_active_alt_setting
001a62   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a64   ffd9
001a66   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1754 (0x06da) bytes ( 1.34%)
                                           ;           	  877 (0x036d) words
                                           ; udata size:	  158 (0x009e) bytes ( 8.82%)
                                           ; access size:	   12 (0x000c) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.2 #4854 (Jun 17 2007)
                                           ; This file generated Thu Jun 21 16:16:21 2007
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _null_function
                                           	global _boot_device_descriptor
                                           	global _boot_default_cfg
                                           	global _boot_flash_cfg
                                           	global _boot_configuration_descriptor
                                           	global _str0
                                           	global _str1
                                           	global _str2
                                           	global _str3
                                           	global _str4
                                           	global _str5
                                           	global _boot_string_descriptor
                                           	global _boot_ep_init
                                           	global _boot_ep_in
                                           	global _boot_ep_out
                                           	global _boot_ep_setup
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _section_descriptor
                                           	extern _ep0_init
                                           	extern _ep1_init
                                           	extern _ep2_init
                                           	extern _ep0_in
                                           	extern _ep2_in
                                           	extern _ep1_out
                                           	extern _ep0_setup
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_usb_descriptors__null_function	code
                                           _null_function:
001b7c   0012     return	0                 	return
                                           	
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _boot_device_descriptor:
000410   0112     movlb	0x12               	DB	0x12, 0x01, 0x00, 0x02, 0xff, 0x00, 0xff, 0x08, 0xa5, 0xa5, 0x01, 0x00
000412   0200     mulwf	0, 0               
000414   00ff     reset                    
000416   08ff     sublw	0xff               
000418   a5a5     btfss	0xa5, 0x2, 0x1     
00041a   0001     dw	0x1  ;unknown opcode  
00041c   0100     movlb	0                  	DB	0x00, 0x01, 0x01, 0x02, 0x03, 0x02
00041e   0201     mulwf	0x1, 0             
000420   0203     mulwf	0x3, 0             
                                           ; ; Starting pCode block for Ival
                                           _boot_default_cfg:
000422   0209     mulwf	0x9, 0             	DB	0x09, 0x02, 0x12, 0x00, 0x01, 0x01, 0x04, 0xc0, 0x00, 0x09, 0x04, 0x00
000424   0012     return	0                 
000426   0101     movlb	0x1                
000428   c004     movff	0x4, 0x900         
00042a   0900
00042c   0004     clrwdt                   
00042e   0000     nop                      	DB	0x00, 0x00, 0xff, 0xff, 0xff, 0x04
000430   ffff     dw	0xffff  ;unknown opcode 
000432   04ff     decf	0xff, 0, 0          
                                           ; ; Starting pCode block for Ival
                                           _boot_flash_cfg:
000434   0209     mulwf	0x9, 0             	DB	0x09, 0x02, 0x20, 0x00, 0x01, 0x02, 0x05, 0xc0, 0x00, 0x09, 0x04, 0x00
000436   0020     dw	0x20  ;unknown opcode 
000438   0201     mulwf	0x1, 0             
00043a   c005     movff	0x5, 0x900         
00043c   0900
00043e   0004     clrwdt                   
000440   0200     mulwf	0, 0               	DB	0x00, 0x02, 0xff, 0xff, 0xff, 0x05, 0x07, 0x05, 0x01, 0x02, 0x40, 0x00
000442   ffff     dw	0xffff  ;unknown opcode 
000444   05ff     decf	0xff, 0, 0x1        
000446   0507     decf	0x7, 0, 0x1         
000448   0201     mulwf	0x1, 0             
00044a   0040     dw	0x40  ;unknown opcode 
00044c   0700     decf	0, 0x1, 0x1         	DB	0x00, 0x07, 0x05, 0x82, 0x02, 0x40, 0x00, 0x00
00044e   8205     bsf	0x5, 0x1, 0          
000450   4002     rrncf	0x2, 0, 0          
000452   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _boot_configuration_descriptor:
000454   0422     decf	0x22, 0, 0          	DB	LOW(_boot_default_cfg), HIGH(_boot_default_cfg), UPPER(_boot_default_cfg), LOW(_boot_flash_cfg), HIGH(_boot_flash_cfg), UPPER(_boot_flash_cfg)
000456   3400     rlcf	0, 0, 0             
000458   0004     clrwdt                   
                                           ; ; Starting pCode block for Ival
                                           _str0:
00045a   0304     mulwf	0x4, 0x1           	DB	0x04, 0x03, 0x09, 0x04
00045c   0409     decf	0x9, 0, 0           
                                           ; ; Starting pCode block for Ival
                                           _str1:
00045e   031c     mulwf	0x1c, 0x1          	DB	0x1c, 0x03, 0x56, 0x00, 0x61, 0x00, 0x73, 0x00, 0x63, 0x00, 0x6f, 0x00
000460   0056     dw	0x56  ;unknown opcode 
000462   0061     dw	0x61  ;unknown opcode 
000464   0073     dw	0x73  ;unknown opcode 
000466   0063     dw	0x63  ;unknown opcode 
000468   006f     dw	0x6f  ;unknown opcode 
00046a   0020     dw	0x20  ;unknown opcode 	DB	0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6a, 0x00, 0x65, 0x00
00046c   0050     dw	0x50  ;unknown opcode 
00046e   0072     dw	0x72  ;unknown opcode 
000470   006f     dw	0x6f  ;unknown opcode 
000472   006a     dw	0x6a  ;unknown opcode 
000474   0065     dw	0x65  ;unknown opcode 
000476   0063     dw	0x63  ;unknown opcode 	DB	0x63, 0x00, 0x74, 0x00
000478   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _str2:
00047a   0324     mulwf	0x24, 0x1          	DB	0x24, 0x03, 0x50, 0x00, 0x65, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00
00047c   0050     dw	0x50  ;unknown opcode 
00047e   0065     dw	0x65  ;unknown opcode 
000480   0072     dw	0x72  ;unknown opcode 
000482   0069     dw	0x69  ;unknown opcode 
000484   0070     dw	0x70  ;unknown opcode 
000486   0068     dw	0x68  ;unknown opcode 	DB	0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x20, 0x00
000488   0065     dw	0x65  ;unknown opcode 
00048a   0072     dw	0x72  ;unknown opcode 
00048c   0061     dw	0x61  ;unknown opcode 
00048e   006c     dw	0x6c  ;unknown opcode 
000490   0020     dw	0x20  ;unknown opcode 
000492   006d     dw	0x6d  ;unknown opcode 	DB	0x6d, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x65, 0x00
000494   006f     dw	0x6f  ;unknown opcode 
000496   0064     dw	0x64  ;unknown opcode 
000498   0075     dw	0x75  ;unknown opcode 
00049a   006c     dw	0x6c  ;unknown opcode 
00049c   0065     dw	0x65  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _str3:
00049e   0304     mulwf	0x4, 0x1           	DB	0x04, 0x03, 0x31, 0x00
0004a0   0031     dw	0x31  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _str4:
0004a2   0310     mulwf	0x10, 0x1          	DB	0x10, 0x03, 0x44, 0x00, 0x65, 0x00, 0x66, 0x00, 0x61, 0x00, 0x75, 0x00
0004a4   0044     dw	0x44  ;unknown opcode 
0004a6   0065     dw	0x65  ;unknown opcode 
0004a8   0066     dw	0x66  ;unknown opcode 
0004aa   0061     dw	0x61  ;unknown opcode 
0004ac   0075     dw	0x75  ;unknown opcode 
0004ae   006c     dw	0x6c  ;unknown opcode 	DB	0x6c, 0x00, 0x74, 0x00
0004b0   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _str5:
0004b2   030c     mulwf	0xc, 0x1           	DB	0x0c, 0x03, 0x46, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x73, 0x00, 0x68, 0x00
0004b4   0046     dw	0x46  ;unknown opcode 
0004b6   006c     dw	0x6c  ;unknown opcode 
0004b8   0061     dw	0x61  ;unknown opcode 
0004ba   0073     dw	0x73  ;unknown opcode 
0004bc   0068     dw	0x68  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_string_descriptor:
0004be   045a     decf	0x5a, 0, 0          	DB	LOW(_str0), HIGH(_str0), UPPER(_str0), LOW(_str1), HIGH(_str1), UPPER(_str1), LOW(_str2), HIGH(_str2), UPPER(_str2), LOW(_str3), HIGH(_str3), UPPER(_str3)
0004c0   5e00     subwf	0, 0x1, 0          
0004c2   0004     clrwdt                   
0004c4   047a     decf	0x7a, 0, 0          
0004c6   9e00     bcf	0, 0x7, 0            
0004c8   0004     clrwdt                   
0004ca   04a2     decf	0xa2, 0, 0          	DB	LOW(_str4), HIGH(_str4), UPPER(_str4), LOW(_str5), HIGH(_str5), UPPER(_str5)
0004cc   b200     btfsc	0, 0x1, 0          
0004ce   0004     clrwdt                   
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_init_cfg0:
0004d0   197c     xorwf	0x7c, 0, 0x1       	DB	LOW(_ep0_init), HIGH(_ep0_init), UPPER(_ep0_init), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0004d2   7c00     btg	0, 0x6, 0            
0004d4   001b     dw	0x1b  ;unknown opcode 
0004d6   1b7c     xorwf	0x7c, 0x1, 0x1     
0004d8   7c00     btg	0, 0x6, 0            
0004da   001b     dw	0x1b  ;unknown opcode 
0004dc   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0004de   7c00     btg	0, 0x6, 0            
0004e0   001b     dw	0x1b  ;unknown opcode 
0004e2   1b7c     xorwf	0x7c, 0x1, 0x1     
0004e4   7c00     btg	0, 0x6, 0            
0004e6   001b     dw	0x1b  ;unknown opcode 
0004e8   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0004ea   7c00     btg	0, 0x6, 0            
0004ec   001b     dw	0x1b  ;unknown opcode 
0004ee   1b7c     xorwf	0x7c, 0x1, 0x1     
0004f0   7c00     btg	0, 0x6, 0            
0004f2   001b     dw	0x1b  ;unknown opcode 
0004f4   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0004f6   7c00     btg	0, 0x6, 0            
0004f8   001b     dw	0x1b  ;unknown opcode 
0004fa   1b7c     xorwf	0x7c, 0x1, 0x1     
0004fc   7c00     btg	0, 0x6, 0            
0004fe   001b     dw	0x1b  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_init_cfg1:
000500   197c     xorwf	0x7c, 0, 0x1       	DB	LOW(_ep0_init), HIGH(_ep0_init), UPPER(_ep0_init), LOW(_ep1_init), HIGH(_ep1_init), UPPER(_ep1_init), LOW(_ep2_init), HIGH(_ep2_init), UPPER(_ep2_init), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000502   9400     bcf	0, 0x2, 0            
000504   001a     dw	0x1a  ;unknown opcode 
000506   1b38     xorwf	0x38, 0x1, 0x1     
000508   7c00     btg	0, 0x6, 0            
00050a   001b     dw	0x1b  ;unknown opcode 
00050c   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00050e   7c00     btg	0, 0x6, 0            
000510   001b     dw	0x1b  ;unknown opcode 
000512   1b7c     xorwf	0x7c, 0x1, 0x1     
000514   7c00     btg	0, 0x6, 0            
000516   001b     dw	0x1b  ;unknown opcode 
000518   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00051a   7c00     btg	0, 0x6, 0            
00051c   001b     dw	0x1b  ;unknown opcode 
00051e   1b7c     xorwf	0x7c, 0x1, 0x1     
000520   7c00     btg	0, 0x6, 0            
000522   001b     dw	0x1b  ;unknown opcode 
000524   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000526   7c00     btg	0, 0x6, 0            
000528   001b     dw	0x1b  ;unknown opcode 
00052a   1b7c     xorwf	0x7c, 0x1, 0x1     
00052c   7c00     btg	0, 0x6, 0            
00052e   001b     dw	0x1b  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_init:
000530   04d0     decf	0xd0, 0, 0          	DB	LOW(_boot_ep_init_cfg0), HIGH(_boot_ep_init_cfg0), UPPER(_boot_ep_init_cfg0), LOW(_boot_ep_init_cfg0), HIGH(_boot_ep_init_cfg0), UPPER(_boot_ep_init_cfg0), LOW(_boot_ep_init_cfg1), HIGH(_boot_ep_init_cfg1), UPPER(_boot_ep_init_cfg1)
000532   d000     bra	0x534                
000534   0004     clrwdt                   
000536   0500     decf	0, 0, 0x1           
000538   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_in_cfg0:
00053a   096e     iorlw	0x6e               	DB	LOW(_ep0_in), HIGH(_ep0_in), UPPER(_ep0_in), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00053c   7c00     btg	0, 0x6, 0            
00053e   001b     dw	0x1b  ;unknown opcode 
000540   1b7c     xorwf	0x7c, 0x1, 0x1     
000542   7c00     btg	0, 0x6, 0            
000544   001b     dw	0x1b  ;unknown opcode 
000546   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000548   7c00     btg	0, 0x6, 0            
00054a   001b     dw	0x1b  ;unknown opcode 
00054c   1b7c     xorwf	0x7c, 0x1, 0x1     
00054e   7c00     btg	0, 0x6, 0            
000550   001b     dw	0x1b  ;unknown opcode 
000552   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000554   7c00     btg	0, 0x6, 0            
000556   001b     dw	0x1b  ;unknown opcode 
000558   1b7c     xorwf	0x7c, 0x1, 0x1     
00055a   7c00     btg	0, 0x6, 0            
00055c   001b     dw	0x1b  ;unknown opcode 
00055e   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000560   7c00     btg	0, 0x6, 0            
000562   001b     dw	0x1b  ;unknown opcode 
000564   1b7c     xorwf	0x7c, 0x1, 0x1     
000566   7c00     btg	0, 0x6, 0            
000568   001b     dw	0x1b  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_in_cfg1:
00056a   096e     iorlw	0x6e               	DB	LOW(_ep0_in), HIGH(_ep0_in), UPPER(_ep0_in), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_ep2_in), HIGH(_ep2_in), UPPER(_ep2_in), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00056c   7c00     btg	0, 0x6, 0            
00056e   001b     dw	0x1b  ;unknown opcode 
000570   1650     andwf	0x50, 0x1, 0       
000572   7c00     btg	0, 0x6, 0            
000574   001b     dw	0x1b  ;unknown opcode 
000576   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000578   7c00     btg	0, 0x6, 0            
00057a   001b     dw	0x1b  ;unknown opcode 
00057c   1b7c     xorwf	0x7c, 0x1, 0x1     
00057e   7c00     btg	0, 0x6, 0            
000580   001b     dw	0x1b  ;unknown opcode 
000582   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000584   7c00     btg	0, 0x6, 0            
000586   001b     dw	0x1b  ;unknown opcode 
000588   1b7c     xorwf	0x7c, 0x1, 0x1     
00058a   7c00     btg	0, 0x6, 0            
00058c   001b     dw	0x1b  ;unknown opcode 
00058e   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000590   7c00     btg	0, 0x6, 0            
000592   001b     dw	0x1b  ;unknown opcode 
000594   1b7c     xorwf	0x7c, 0x1, 0x1     
000596   7c00     btg	0, 0x6, 0            
000598   001b     dw	0x1b  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_in:
00059a   053a     decf	0x3a, 0, 0x1        	DB	LOW(_boot_ep_in_cfg0), HIGH(_boot_ep_in_cfg0), UPPER(_boot_ep_in_cfg0), LOW(_boot_ep_in_cfg0), HIGH(_boot_ep_in_cfg0), UPPER(_boot_ep_in_cfg0), LOW(_boot_ep_in_cfg1), HIGH(_boot_ep_in_cfg1), UPPER(_boot_ep_in_cfg1)
00059c   3a00     swapf	0, 0x1, 0          
00059e   0005     push                     
0005a0   056a     decf	0x6a, 0, 0x1        
0005a2   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_out_cfg0:
0005a4   197c     xorwf	0x7c, 0, 0x1       	DB	LOW(_ep0_init), HIGH(_ep0_init), UPPER(_ep0_init), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0005a6   7c00     btg	0, 0x6, 0            
0005a8   001b     dw	0x1b  ;unknown opcode 
0005aa   1b7c     xorwf	0x7c, 0x1, 0x1     
0005ac   7c00     btg	0, 0x6, 0            
0005ae   001b     dw	0x1b  ;unknown opcode 
0005b0   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0005b2   7c00     btg	0, 0x6, 0            
0005b4   001b     dw	0x1b  ;unknown opcode 
0005b6   1b7c     xorwf	0x7c, 0x1, 0x1     
0005b8   7c00     btg	0, 0x6, 0            
0005ba   001b     dw	0x1b  ;unknown opcode 
0005bc   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0005be   7c00     btg	0, 0x6, 0            
0005c0   001b     dw	0x1b  ;unknown opcode 
0005c2   1b7c     xorwf	0x7c, 0x1, 0x1     
0005c4   7c00     btg	0, 0x6, 0            
0005c6   001b     dw	0x1b  ;unknown opcode 
0005c8   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0005ca   7c00     btg	0, 0x6, 0            
0005cc   001b     dw	0x1b  ;unknown opcode 
0005ce   1b7c     xorwf	0x7c, 0x1, 0x1     
0005d0   7c00     btg	0, 0x6, 0            
0005d2   001b     dw	0x1b  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_out_cfg1:
0005d4   197c     xorwf	0x7c, 0, 0x1       	DB	LOW(_ep0_init), HIGH(_ep0_init), UPPER(_ep0_init), LOW(_ep1_out), HIGH(_ep1_out), UPPER(_ep1_out), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0005d6   1a00     xorwf	0, 0x1, 0          
0005d8   000c     tblwt	*                  
0005da   1b7c     xorwf	0x7c, 0x1, 0x1     
0005dc   7c00     btg	0, 0x6, 0            
0005de   001b     dw	0x1b  ;unknown opcode 
0005e0   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0005e2   7c00     btg	0, 0x6, 0            
0005e4   001b     dw	0x1b  ;unknown opcode 
0005e6   1b7c     xorwf	0x7c, 0x1, 0x1     
0005e8   7c00     btg	0, 0x6, 0            
0005ea   001b     dw	0x1b  ;unknown opcode 
0005ec   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0005ee   7c00     btg	0, 0x6, 0            
0005f0   001b     dw	0x1b  ;unknown opcode 
0005f2   1b7c     xorwf	0x7c, 0x1, 0x1     
0005f4   7c00     btg	0, 0x6, 0            
0005f6   001b     dw	0x1b  ;unknown opcode 
0005f8   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0005fa   7c00     btg	0, 0x6, 0            
0005fc   001b     dw	0x1b  ;unknown opcode 
0005fe   1b7c     xorwf	0x7c, 0x1, 0x1     
000600   7c00     btg	0, 0x6, 0            
000602   001b     dw	0x1b  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_out:
000604   05a4     decf	0xa4, 0, 0x1        	DB	LOW(_boot_ep_out_cfg0), HIGH(_boot_ep_out_cfg0), UPPER(_boot_ep_out_cfg0), LOW(_boot_ep_out_cfg0), HIGH(_boot_ep_out_cfg0), UPPER(_boot_ep_out_cfg0), LOW(_boot_ep_out_cfg1), HIGH(_boot_ep_out_cfg1), UPPER(_boot_ep_out_cfg1)
000606   a400     btfss	0, 0x2, 0          
000608   0005     push                     
00060a   05d4     decf	0xd4, 0, 0x1        
00060c   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_setup_cfg:
00060e   1258     iorwf	0x58, 0x1, 0       	DB	LOW(_ep0_setup), HIGH(_ep0_setup), UPPER(_ep0_setup), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000610   7c00     btg	0, 0x6, 0            
000612   001b     dw	0x1b  ;unknown opcode 
000614   1b7c     xorwf	0x7c, 0x1, 0x1     
000616   7c00     btg	0, 0x6, 0            
000618   001b     dw	0x1b  ;unknown opcode 
00061a   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00061c   7c00     btg	0, 0x6, 0            
00061e   001b     dw	0x1b  ;unknown opcode 
000620   1b7c     xorwf	0x7c, 0x1, 0x1     
000622   7c00     btg	0, 0x6, 0            
000624   001b     dw	0x1b  ;unknown opcode 
000626   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000628   7c00     btg	0, 0x6, 0            
00062a   001b     dw	0x1b  ;unknown opcode 
00062c   1b7c     xorwf	0x7c, 0x1, 0x1     
00062e   7c00     btg	0, 0x6, 0            
000630   001b     dw	0x1b  ;unknown opcode 
000632   1b7c     xorwf	0x7c, 0x1, 0x1     	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000634   7c00     btg	0, 0x6, 0            
000636   001b     dw	0x1b  ;unknown opcode 
000638   1b7c     xorwf	0x7c, 0x1, 0x1     
00063a   7c00     btg	0, 0x6, 0            
00063c   001b     dw	0x1b  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_setup:
00063e   060e     decf	0xe, 0x1, 0         	DB	LOW(_boot_ep_setup_cfg), HIGH(_boot_ep_setup_cfg), UPPER(_boot_ep_setup_cfg), LOW(_boot_ep_setup_cfg), HIGH(_boot_ep_setup_cfg), UPPER(_boot_ep_setup_cfg), LOW(_boot_ep_setup_cfg), HIGH(_boot_ep_setup_cfg), UPPER(_boot_ep_setup_cfg)
000640   0e00     movlw	0                  
000642   0006     pop                      
000644   060e     decf	0xe, 0x1, 0         
000646   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  112 (0x0070) bytes ( 0.09%)
                                           ;           	   56 (0x0038) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
